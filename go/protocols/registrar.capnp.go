// Code generated by capnpc-go. DO NOT EDIT.

package protocols

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Registrar capnp.Client

// Registrar_TypeID is the unique identifier for the type Registrar.
const Registrar_TypeID = 0x8b6a902300babd8d

func (c Registrar) Register(ctx context.Context, params func(Registrar_register_Params) error) (Registrar_register_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8b6a902300babd8d,
			MethodID:      0,
			InterfaceName: "registrar.capnp:Registrar",
			MethodName:    "register",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registrar_register_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Registrar_register_Results_Future{Future: ans.Future()}, release

}

func (c Registrar) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Registrar) String() string {
	return "Registrar(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Registrar) AddRef() Registrar {
	return Registrar(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Registrar) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Registrar) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Registrar) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Registrar) DecodeFromPtr(p capnp.Ptr) Registrar {
	return Registrar(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Registrar) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Registrar) IsSame(other Registrar) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Registrar) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Registrar) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Registrar_Server is a Registrar with a local implementation.
type Registrar_Server interface {
	Register(context.Context, Registrar_register) error
}

// Registrar_NewServer creates a new Server from an implementation of Registrar_Server.
func Registrar_NewServer(s Registrar_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Registrar_Methods(nil, s), s, c)
}

// Registrar_ServerToClient creates a new Client from an implementation of Registrar_Server.
// The caller is responsible for calling Release on the returned Client.
func Registrar_ServerToClient(s Registrar_Server) Registrar {
	return Registrar(capnp.NewClient(Registrar_NewServer(s)))
}

// Registrar_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Registrar_Methods(methods []server.Method, s Registrar_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8b6a902300babd8d,
			MethodID:      0,
			InterfaceName: "registrar.capnp:Registrar",
			MethodName:    "register",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Register(ctx, Registrar_register{call})
		},
	})

	return methods
}

// Registrar_register holds the state for a server call to Registrar.register.
// See server.Call for documentation.
type Registrar_register struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registrar_register) Args() Registrar_register_Params {
	return Registrar_register_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Registrar_register) AllocResults() (Registrar_register_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registrar_register_Results(r), err
}

// Registrar_List is a list of Registrar.
type Registrar_List = capnp.CapList[Registrar]

// NewRegistrar creates a new list of Registrar.
func NewRegistrar_List(s *capnp.Segment, sz int32) (Registrar_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Registrar](l), err
}

type Registrar_register_Params capnp.Struct

// Registrar_register_Params_TypeID is the unique identifier for the type Registrar_register_Params.
const Registrar_register_Params_TypeID = 0xbb640cd6a2368e7b

func NewRegistrar_register_Params(s *capnp.Segment) (Registrar_register_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registrar_register_Params(st), err
}

func NewRootRegistrar_register_Params(s *capnp.Segment) (Registrar_register_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registrar_register_Params(st), err
}

func ReadRootRegistrar_register_Params(msg *capnp.Message) (Registrar_register_Params, error) {
	root, err := msg.Root()
	return Registrar_register_Params(root.Struct()), err
}

func (s Registrar_register_Params) String() string {
	str, _ := text.Marshal(0xbb640cd6a2368e7b, capnp.Struct(s))
	return str
}

func (s Registrar_register_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registrar_register_Params) DecodeFromPtr(p capnp.Ptr) Registrar_register_Params {
	return Registrar_register_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registrar_register_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registrar_register_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registrar_register_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registrar_register_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Registrar_register_Params) Request() (RegistrationRequest, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RegistrationRequest(p.Struct()), err
}

func (s Registrar_register_Params) HasRequest() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Registrar_register_Params) SetRequest(v RegistrationRequest) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRequest sets the request field to a newly
// allocated RegistrationRequest struct, preferring placement in s's segment.
func (s Registrar_register_Params) NewRequest() (RegistrationRequest, error) {
	ss, err := NewRegistrationRequest(capnp.Struct(s).Segment())
	if err != nil {
		return RegistrationRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Registrar_register_Params_List is a list of Registrar_register_Params.
type Registrar_register_Params_List = capnp.StructList[Registrar_register_Params]

// NewRegistrar_register_Params creates a new list of Registrar_register_Params.
func NewRegistrar_register_Params_List(s *capnp.Segment, sz int32) (Registrar_register_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Registrar_register_Params](l), err
}

// Registrar_register_Params_Future is a wrapper for a Registrar_register_Params promised by a client call.
type Registrar_register_Params_Future struct{ *capnp.Future }

func (f Registrar_register_Params_Future) Struct() (Registrar_register_Params, error) {
	p, err := f.Future.Ptr()
	return Registrar_register_Params(p.Struct()), err
}
func (p Registrar_register_Params_Future) Request() RegistrationRequest_Future {
	return RegistrationRequest_Future{Future: p.Future.Field(0, nil)}
}

type Registrar_register_Results capnp.Struct

// Registrar_register_Results_TypeID is the unique identifier for the type Registrar_register_Results.
const Registrar_register_Results_TypeID = 0xc153a33d94e9f1b9

func NewRegistrar_register_Results(s *capnp.Segment) (Registrar_register_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registrar_register_Results(st), err
}

func NewRootRegistrar_register_Results(s *capnp.Segment) (Registrar_register_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registrar_register_Results(st), err
}

func ReadRootRegistrar_register_Results(msg *capnp.Message) (Registrar_register_Results, error) {
	root, err := msg.Root()
	return Registrar_register_Results(root.Struct()), err
}

func (s Registrar_register_Results) String() string {
	str, _ := text.Marshal(0xc153a33d94e9f1b9, capnp.Struct(s))
	return str
}

func (s Registrar_register_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registrar_register_Results) DecodeFromPtr(p capnp.Ptr) Registrar_register_Results {
	return Registrar_register_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registrar_register_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registrar_register_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registrar_register_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registrar_register_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Registrar_register_Results_List is a list of Registrar_register_Results.
type Registrar_register_Results_List = capnp.StructList[Registrar_register_Results]

// NewRegistrar_register_Results creates a new list of Registrar_register_Results.
func NewRegistrar_register_Results_List(s *capnp.Segment, sz int32) (Registrar_register_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Registrar_register_Results](l), err
}

// Registrar_register_Results_Future is a wrapper for a Registrar_register_Results promised by a client call.
type Registrar_register_Results_Future struct{ *capnp.Future }

func (f Registrar_register_Results_Future) Struct() (Registrar_register_Results, error) {
	p, err := f.Future.Ptr()
	return Registrar_register_Results(p.Struct()), err
}

const schema_c66174b4f8a2dcd1 = "x\xda2\xe8dt`1\xe4]\xcf\xc5\xc0\x14X\xc3" +
	"\xca\xf6\xbdw\xef.\xe5\x09Y\xdd\x82\x02\xcc\xff/\xde" +
	"Y\xf4cKI\xe21\x06\x06Fa[\xd6K\xc2\x9e" +
	"\xac\xec\x0c\x0c\xc2\xae\xac\xee\xc2\x85 \xd6\xff\xea>\xb3" +
	"E\xd7xRv3\x08J120\xb02\xb230" +
	"\x18G\xb2\x06120\x0a\xa7\xb2\xda30\xfe\xdf\xf9" +
	"\xf1\xe5\x14\xdb\xc5\xc1\x07!\x0aX@\xf2\xad\xacQ\x8c" +
	"\x0c\xff\x19,\xfe\x17\xa5\xa6g\x16\x97\x14%2\x15\xe9" +
	"%'\x16\xe4\x15X\x05A\x05\x18\x8b\x02\x18\x19\x03Y" +
	"\x98Y\x91l`\x84\x99$(\xe8\xc5\xc0$\xc8\xc9\x0e" +
	"\xd5\x9eZ\xc4\xc0\xc0\xe0\xc0\x18\xc0\xc8\x087\x8f\x05\xdd" +
	"\xbc\"=\x98Z\x95\x80\xc4\xa2\xc4\\\xc6\xe2@\x16f" +
	"\x16\x06\x06\x16F\x06\x06A^'\x06\x86@\x0ef\xc6" +
	"@\x11&\xc6\xfa\xa2\xd4\xc2\xd2\xd4\xe2\x12F\x81\xff3" +
	"\xaffw\x19\x85\x7f\xedf``d\x14` \xce\xf0" +
	"\xa0\xd4\xe2\xd2\x1c\xe6\x92b@\x00\x00\x00\xff\xffC-" +
	"h\xeb"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c66174b4f8a2dcd1,
		Nodes: []uint64{
			0x8b6a902300babd8d,
			0xbb640cd6a2368e7b,
			0xc153a33d94e9f1b9,
		},
		Compressed: true,
	})
}

// Code generated by capnpc-go. DO NOT EDIT.

package protocols

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	math "math"
)

type Metrics capnp.Client

// Metrics_TypeID is the unique identifier for the type Metrics.
const Metrics_TypeID = 0xb8c43d882114c266

func (c Metrics) Submit(ctx context.Context, params func(Metrics_submit_Params) error) (Metrics_submit_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb8c43d882114c266,
			MethodID:      0,
			InterfaceName: "metrics.capnp:Metrics",
			MethodName:    "submit",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Metrics_submit_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Metrics_submit_Results_Future{Future: ans.Future()}, release

}

func (c Metrics) List(ctx context.Context, params func(Metrics_list_Params) error) (Metrics_list_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb8c43d882114c266,
			MethodID:      1,
			InterfaceName: "metrics.capnp:Metrics",
			MethodName:    "list",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Metrics_list_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Metrics_list_Results_Future{Future: ans.Future()}, release

}

func (c Metrics) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Metrics) String() string {
	return "Metrics(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Metrics) AddRef() Metrics {
	return Metrics(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Metrics) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Metrics) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Metrics) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Metrics) DecodeFromPtr(p capnp.Ptr) Metrics {
	return Metrics(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Metrics) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Metrics) IsSame(other Metrics) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Metrics) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Metrics) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Metrics_Server is a Metrics with a local implementation.
type Metrics_Server interface {
	Submit(context.Context, Metrics_submit) error

	List(context.Context, Metrics_list) error
}

// Metrics_NewServer creates a new Server from an implementation of Metrics_Server.
func Metrics_NewServer(s Metrics_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Metrics_Methods(nil, s), s, c)
}

// Metrics_ServerToClient creates a new Client from an implementation of Metrics_Server.
// The caller is responsible for calling Release on the returned Client.
func Metrics_ServerToClient(s Metrics_Server) Metrics {
	return Metrics(capnp.NewClient(Metrics_NewServer(s)))
}

// Metrics_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Metrics_Methods(methods []server.Method, s Metrics_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb8c43d882114c266,
			MethodID:      0,
			InterfaceName: "metrics.capnp:Metrics",
			MethodName:    "submit",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Submit(ctx, Metrics_submit{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb8c43d882114c266,
			MethodID:      1,
			InterfaceName: "metrics.capnp:Metrics",
			MethodName:    "list",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.List(ctx, Metrics_list{call})
		},
	})

	return methods
}

// Metrics_submit holds the state for a server call to Metrics.submit.
// See server.Call for documentation.
type Metrics_submit struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Metrics_submit) Args() Metrics_submit_Params {
	return Metrics_submit_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Metrics_submit) AllocResults() (Metrics_submit_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Metrics_submit_Results(r), err
}

// Metrics_list holds the state for a server call to Metrics.list.
// See server.Call for documentation.
type Metrics_list struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Metrics_list) Args() Metrics_list_Params {
	return Metrics_list_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Metrics_list) AllocResults() (Metrics_list_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metrics_list_Results(r), err
}

// Metrics_List is a list of Metrics.
type Metrics_List = capnp.CapList[Metrics]

// NewMetrics creates a new list of Metrics.
func NewMetrics_List(s *capnp.Segment, sz int32) (Metrics_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Metrics](l), err
}

type Metrics_submit_Params capnp.Struct

// Metrics_submit_Params_TypeID is the unique identifier for the type Metrics_submit_Params.
const Metrics_submit_Params_TypeID = 0xd3e245b385ea1813

func NewMetrics_submit_Params(s *capnp.Segment) (Metrics_submit_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Metrics_submit_Params(st), err
}

func NewRootMetrics_submit_Params(s *capnp.Segment) (Metrics_submit_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Metrics_submit_Params(st), err
}

func ReadRootMetrics_submit_Params(msg *capnp.Message) (Metrics_submit_Params, error) {
	root, err := msg.Root()
	return Metrics_submit_Params(root.Struct()), err
}

func (s Metrics_submit_Params) String() string {
	str, _ := text.Marshal(0xd3e245b385ea1813, capnp.Struct(s))
	return str
}

func (s Metrics_submit_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metrics_submit_Params) DecodeFromPtr(p capnp.Ptr) Metrics_submit_Params {
	return Metrics_submit_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metrics_submit_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metrics_submit_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metrics_submit_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metrics_submit_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metrics_submit_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Metrics_submit_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metrics_submit_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Metrics_submit_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Metrics_submit_Params) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Metrics_submit_Params) SetValue(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// Metrics_submit_Params_List is a list of Metrics_submit_Params.
type Metrics_submit_Params_List = capnp.StructList[Metrics_submit_Params]

// NewMetrics_submit_Params creates a new list of Metrics_submit_Params.
func NewMetrics_submit_Params_List(s *capnp.Segment, sz int32) (Metrics_submit_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Metrics_submit_Params](l), err
}

// Metrics_submit_Params_Future is a wrapper for a Metrics_submit_Params promised by a client call.
type Metrics_submit_Params_Future struct{ *capnp.Future }

func (f Metrics_submit_Params_Future) Struct() (Metrics_submit_Params, error) {
	p, err := f.Future.Ptr()
	return Metrics_submit_Params(p.Struct()), err
}

type Metrics_submit_Results capnp.Struct

// Metrics_submit_Results_TypeID is the unique identifier for the type Metrics_submit_Results.
const Metrics_submit_Results_TypeID = 0xfe8bed84b5c95623

func NewMetrics_submit_Results(s *capnp.Segment) (Metrics_submit_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Metrics_submit_Results(st), err
}

func NewRootMetrics_submit_Results(s *capnp.Segment) (Metrics_submit_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Metrics_submit_Results(st), err
}

func ReadRootMetrics_submit_Results(msg *capnp.Message) (Metrics_submit_Results, error) {
	root, err := msg.Root()
	return Metrics_submit_Results(root.Struct()), err
}

func (s Metrics_submit_Results) String() string {
	str, _ := text.Marshal(0xfe8bed84b5c95623, capnp.Struct(s))
	return str
}

func (s Metrics_submit_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metrics_submit_Results) DecodeFromPtr(p capnp.Ptr) Metrics_submit_Results {
	return Metrics_submit_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metrics_submit_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metrics_submit_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metrics_submit_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metrics_submit_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Metrics_submit_Results_List is a list of Metrics_submit_Results.
type Metrics_submit_Results_List = capnp.StructList[Metrics_submit_Results]

// NewMetrics_submit_Results creates a new list of Metrics_submit_Results.
func NewMetrics_submit_Results_List(s *capnp.Segment, sz int32) (Metrics_submit_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Metrics_submit_Results](l), err
}

// Metrics_submit_Results_Future is a wrapper for a Metrics_submit_Results promised by a client call.
type Metrics_submit_Results_Future struct{ *capnp.Future }

func (f Metrics_submit_Results_Future) Struct() (Metrics_submit_Results, error) {
	p, err := f.Future.Ptr()
	return Metrics_submit_Results(p.Struct()), err
}

type Metrics_list_Params capnp.Struct

// Metrics_list_Params_TypeID is the unique identifier for the type Metrics_list_Params.
const Metrics_list_Params_TypeID = 0x8290291d4d05c8e4

func NewMetrics_list_Params(s *capnp.Segment) (Metrics_list_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Metrics_list_Params(st), err
}

func NewRootMetrics_list_Params(s *capnp.Segment) (Metrics_list_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Metrics_list_Params(st), err
}

func ReadRootMetrics_list_Params(msg *capnp.Message) (Metrics_list_Params, error) {
	root, err := msg.Root()
	return Metrics_list_Params(root.Struct()), err
}

func (s Metrics_list_Params) String() string {
	str, _ := text.Marshal(0x8290291d4d05c8e4, capnp.Struct(s))
	return str
}

func (s Metrics_list_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metrics_list_Params) DecodeFromPtr(p capnp.Ptr) Metrics_list_Params {
	return Metrics_list_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metrics_list_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metrics_list_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metrics_list_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metrics_list_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Metrics_list_Params_List is a list of Metrics_list_Params.
type Metrics_list_Params_List = capnp.StructList[Metrics_list_Params]

// NewMetrics_list_Params creates a new list of Metrics_list_Params.
func NewMetrics_list_Params_List(s *capnp.Segment, sz int32) (Metrics_list_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Metrics_list_Params](l), err
}

// Metrics_list_Params_Future is a wrapper for a Metrics_list_Params promised by a client call.
type Metrics_list_Params_Future struct{ *capnp.Future }

func (f Metrics_list_Params_Future) Struct() (Metrics_list_Params, error) {
	p, err := f.Future.Ptr()
	return Metrics_list_Params(p.Struct()), err
}

type Metrics_list_Results capnp.Struct

// Metrics_list_Results_TypeID is the unique identifier for the type Metrics_list_Results.
const Metrics_list_Results_TypeID = 0xe835f309b053731c

func NewMetrics_list_Results(s *capnp.Segment) (Metrics_list_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metrics_list_Results(st), err
}

func NewRootMetrics_list_Results(s *capnp.Segment) (Metrics_list_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metrics_list_Results(st), err
}

func ReadRootMetrics_list_Results(msg *capnp.Message) (Metrics_list_Results, error) {
	root, err := msg.Root()
	return Metrics_list_Results(root.Struct()), err
}

func (s Metrics_list_Results) String() string {
	str, _ := text.Marshal(0xe835f309b053731c, capnp.Struct(s))
	return str
}

func (s Metrics_list_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metrics_list_Results) DecodeFromPtr(p capnp.Ptr) Metrics_list_Results {
	return Metrics_list_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metrics_list_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metrics_list_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metrics_list_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metrics_list_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metrics_list_Results) Metrics() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s Metrics_list_Results) HasMetrics() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metrics_list_Results) SetMetrics(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMetrics sets the metrics field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Metrics_list_Results) NewMetrics(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Metrics_list_Results_List is a list of Metrics_list_Results.
type Metrics_list_Results_List = capnp.StructList[Metrics_list_Results]

// NewMetrics_list_Results creates a new list of Metrics_list_Results.
func NewMetrics_list_Results_List(s *capnp.Segment, sz int32) (Metrics_list_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Metrics_list_Results](l), err
}

// Metrics_list_Results_Future is a wrapper for a Metrics_list_Results promised by a client call.
type Metrics_list_Results_Future struct{ *capnp.Future }

func (f Metrics_list_Results_Future) Struct() (Metrics_list_Results, error) {
	p, err := f.Future.Ptr()
	return Metrics_list_Results(p.Struct()), err
}

const schema_b1de3984a98f80b1 = "x\xda\x84\x90?\xc8\xd3@\x18\x87\x7f\xbf\xbb\xc4T\xbe" +
	"\xaf\xadg>\x8a\x8aR\xd4\x08\xb6\xa0\xb4\xd6\x0e\x16\xa4" +
	"Ep,\xe4*\xb89\xc4\x12\xa1\x90\x94\xd2KtT" +
	"\xa4\xa2\xe0\xa0\xab\xa3\xa3\x9bU\x04gqPWw\x07" +
	"q\x10\xc1\xc9Y#\xe9?\xba\xe8\xb7\xdd{<\xc7\xf3" +
	"\xdc{\xe8S\xcfj\x16\xab\x12B{\xf6\x81\xec\xdb\x07" +
	"\xbb\x7f\xa2\xf6\xf4>T\x85\x80\xe5\x00\xad\x94\x87\x09+" +
	"\xbb\xf5n\xef\xe4\xa3\xcb\xef\xdfB\x95d6\xbf\xf7\xe4" +
	"\xc5\xec\xd2\x979@\xf7\x06_\xb9!\x1d\xc0\x0d\xf8\xd0" +
	"\x9d\xe7\xa7\xcc=\xf2\xe3\xc1\xeb\xab_?CWH\xc0" +
	"\xce/[\xcfx\x8a\xa0\xfb\x9cw\xc0\xec\xb8\xb9\xf6\xf2" +
	"\xe0\xaf\xf6\xf7\xa5h\x09\xfc\xe6\xb1\x1c\xb0E\x17\xccN" +
	"_\xff\xf8f\xf6\xf3\xf1\x9f\xad\x92\xb6\xa8\x13\x8d,\x0e" +
	"\x93\xe9hh\xce\xcba0\x19O:\xfd\xd5\x18\x8dL" +
	"\xe2\xf9\xc14\x88i6\x0c\xd7Lu1\xfb\xa4.H" +
	"{\xab\x90k\x8fjv \xd4\x19\x87\xdc,\x81\xebH" +
	"u\xb4\x0e\xa1\x8aN\xd7\xa47\xe3Q\xd2c9\x97\xf5" +
	"\xe8\x93\xff\xaaY\x92y\x8f\x13\xc4F\x17\xa4\x05X\x04" +
	"T\xad\x0ehOR7\x04\xc9\xbd|=\xea\xdc\x05@" +
	"\x9f\x95\xd4\x17\x05\xcb\xe3 \x0e\xb9\x0b\xc1]\xb0z;" +
	"\x88\xd2\x90;\x10\xdc\x01\xff\xfb\xf3Ah\xd2H&F" +
	"[\x1bU\xf1\x0a\xa0\x0b\x92\xda\x13\xbc\xbbz\xcb\x12\xe8" +
	"K.\x04%\xec\x97?\x08M9\x8d\x12\xf37\x00\x00" +
	"\xff\xff\x9d\x08\x94I"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_b1de3984a98f80b1,
		Nodes: []uint64{
			0x8290291d4d05c8e4,
			0xb8c43d882114c266,
			0xd3e245b385ea1813,
			0xe835f309b053731c,
			0xfe8bed84b5c95623,
		},
		Compressed: true,
	})
}

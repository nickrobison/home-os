// Code generated by capnpc-go. DO NOT EDIT.

package protocols

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type ConfigFactory capnp.Client

// ConfigFactory_TypeID is the unique identifier for the type ConfigFactory.
const ConfigFactory_TypeID = 0xe452806dd1c2c3be

func (c ConfigFactory) Create(ctx context.Context, params func(ConfigFactory_create_Params) error) (ConfigFactory_create_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe452806dd1c2c3be,
			MethodID:      0,
			InterfaceName: "config.capnp:ConfigFactory",
			MethodName:    "create",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ConfigFactory_create_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ConfigFactory_create_Results_Future{Future: ans.Future()}, release

}

func (c ConfigFactory) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ConfigFactory) String() string {
	return "ConfigFactory(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ConfigFactory) AddRef() ConfigFactory {
	return ConfigFactory(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ConfigFactory) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ConfigFactory) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ConfigFactory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ConfigFactory) DecodeFromPtr(p capnp.Ptr) ConfigFactory {
	return ConfigFactory(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ConfigFactory) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ConfigFactory) IsSame(other ConfigFactory) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ConfigFactory) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ConfigFactory) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ConfigFactory_Server is a ConfigFactory with a local implementation.
type ConfigFactory_Server interface {
	Create(context.Context, ConfigFactory_create) error
}

// ConfigFactory_NewServer creates a new Server from an implementation of ConfigFactory_Server.
func ConfigFactory_NewServer(s ConfigFactory_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ConfigFactory_Methods(nil, s), s, c)
}

// ConfigFactory_ServerToClient creates a new Client from an implementation of ConfigFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func ConfigFactory_ServerToClient(s ConfigFactory_Server) ConfigFactory {
	return ConfigFactory(capnp.NewClient(ConfigFactory_NewServer(s)))
}

// ConfigFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ConfigFactory_Methods(methods []server.Method, s ConfigFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe452806dd1c2c3be,
			MethodID:      0,
			InterfaceName: "config.capnp:ConfigFactory",
			MethodName:    "create",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Create(ctx, ConfigFactory_create{call})
		},
	})

	return methods
}

// ConfigFactory_create holds the state for a server call to ConfigFactory.create.
// See server.Call for documentation.
type ConfigFactory_create struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ConfigFactory_create) Args() ConfigFactory_create_Params {
	return ConfigFactory_create_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ConfigFactory_create) AllocResults() (ConfigFactory_create_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigFactory_create_Results(r), err
}

// ConfigFactory_List is a list of ConfigFactory.
type ConfigFactory_List = capnp.CapList[ConfigFactory]

// NewConfigFactory creates a new list of ConfigFactory.
func NewConfigFactory_List(s *capnp.Segment, sz int32) (ConfigFactory_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ConfigFactory](l), err
}

type ConfigFactory_create_Params capnp.Struct

// ConfigFactory_create_Params_TypeID is the unique identifier for the type ConfigFactory_create_Params.
const ConfigFactory_create_Params_TypeID = 0x882d2caf1d55aaba

func NewConfigFactory_create_Params(s *capnp.Segment) (ConfigFactory_create_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigFactory_create_Params(st), err
}

func NewRootConfigFactory_create_Params(s *capnp.Segment) (ConfigFactory_create_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigFactory_create_Params(st), err
}

func ReadRootConfigFactory_create_Params(msg *capnp.Message) (ConfigFactory_create_Params, error) {
	root, err := msg.Root()
	return ConfigFactory_create_Params(root.Struct()), err
}

func (s ConfigFactory_create_Params) String() string {
	str, _ := text.Marshal(0x882d2caf1d55aaba, capnp.Struct(s))
	return str
}

func (s ConfigFactory_create_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ConfigFactory_create_Params) DecodeFromPtr(p capnp.Ptr) ConfigFactory_create_Params {
	return ConfigFactory_create_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ConfigFactory_create_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ConfigFactory_create_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ConfigFactory_create_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ConfigFactory_create_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ConfigFactory_create_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ConfigFactory_create_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ConfigFactory_create_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ConfigFactory_create_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ConfigFactory_create_Params_List is a list of ConfigFactory_create_Params.
type ConfigFactory_create_Params_List = capnp.StructList[ConfigFactory_create_Params]

// NewConfigFactory_create_Params creates a new list of ConfigFactory_create_Params.
func NewConfigFactory_create_Params_List(s *capnp.Segment, sz int32) (ConfigFactory_create_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ConfigFactory_create_Params](l), err
}

// ConfigFactory_create_Params_Future is a wrapper for a ConfigFactory_create_Params promised by a client call.
type ConfigFactory_create_Params_Future struct{ *capnp.Future }

func (f ConfigFactory_create_Params_Future) Struct() (ConfigFactory_create_Params, error) {
	p, err := f.Future.Ptr()
	return ConfigFactory_create_Params(p.Struct()), err
}

type ConfigFactory_create_Results capnp.Struct

// ConfigFactory_create_Results_TypeID is the unique identifier for the type ConfigFactory_create_Results.
const ConfigFactory_create_Results_TypeID = 0x8a8b733ce1852265

func NewConfigFactory_create_Results(s *capnp.Segment) (ConfigFactory_create_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigFactory_create_Results(st), err
}

func NewRootConfigFactory_create_Results(s *capnp.Segment) (ConfigFactory_create_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ConfigFactory_create_Results(st), err
}

func ReadRootConfigFactory_create_Results(msg *capnp.Message) (ConfigFactory_create_Results, error) {
	root, err := msg.Root()
	return ConfigFactory_create_Results(root.Struct()), err
}

func (s ConfigFactory_create_Results) String() string {
	str, _ := text.Marshal(0x8a8b733ce1852265, capnp.Struct(s))
	return str
}

func (s ConfigFactory_create_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ConfigFactory_create_Results) DecodeFromPtr(p capnp.Ptr) ConfigFactory_create_Results {
	return ConfigFactory_create_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ConfigFactory_create_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ConfigFactory_create_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ConfigFactory_create_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ConfigFactory_create_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ConfigFactory_create_Results) V() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ConfigFactory_create_Results) HasV() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ConfigFactory_create_Results) VBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ConfigFactory_create_Results) SetV(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ConfigFactory_create_Results_List is a list of ConfigFactory_create_Results.
type ConfigFactory_create_Results_List = capnp.StructList[ConfigFactory_create_Results]

// NewConfigFactory_create_Results creates a new list of ConfigFactory_create_Results.
func NewConfigFactory_create_Results_List(s *capnp.Segment, sz int32) (ConfigFactory_create_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ConfigFactory_create_Results](l), err
}

// ConfigFactory_create_Results_Future is a wrapper for a ConfigFactory_create_Results promised by a client call.
type ConfigFactory_create_Results_Future struct{ *capnp.Future }

func (f ConfigFactory_create_Results_Future) Struct() (ConfigFactory_create_Results, error) {
	p, err := f.Future.Ptr()
	return ConfigFactory_create_Results(p.Struct()), err
}

const schema_9f394813d4260427 = "x\xda\x12\x98\xe0\xc0b\xc8\x9b\xcf\xc4\xc0\x14(\xc3\xca" +
	"\xf6\x7f\xd7\xaaP\xd9\xf5:\xba\x1d\x0c\x82\xd2\x8c\x0c\x0c" +
	"\xac\x8c\xec\x0c\x0c\xc6\xb2\x8c^\x8c\x0c\x8c\xc2\x9a\x8c\xf6" +
	"\x0c\x8c\xffS\x95Z\x1f\xda\x14ww!+\xf0d\x0c" +
	"\x02)\x08\x05+\xd8w\xf8\xd0\xc5\xdc\x86\xa0'\x0c\x82" +
	"\xbc\xcc\xff\xd5Y\xd4\xae\x08{X\xceg``\x14." +
	"e\xbc%\xdc\x08R/\\\xcb\xe8.\xbc\x94\x91\x9dA" +
	"\xe7\x7fr~^Zf\xba^2KbA^\x81\x95" +
	"3\x98\xe7\x96\x98\\\x92_T\xa9\x97\\\x94\x9aX\x92" +
	"\xaa\x12\x90X\x94\x98[\xcc\xc0\x10\xc8\xc2\xcc\xc2\xc0\xc0" +
	"\xc2\xc8\xc0 \xc8\xab\xc5\xc0\x10\xc8\xc1\xcc\x18(\xc2\xc4" +
	"\xc8\x9f\x97\x98\x9b\xca\xc8\xc3\xc0\xc4\xc8\xc3\xc0H\x8cy" +
	"A\xa9\xc5\xa59%\x8c\xc5\xc8\xe6\x09!\xccc,\xc3" +
	"0\x8c\x09\xdd0\xe6\xa2\xca\x00F\xc6@\x16fV\x06" +
	"\x06x\x881\xc2BFP\xd0\x8a\x81I\x90\x95\xdd\x1e" +
	"b\xa1\x03c\x00## \x00\x00\xff\xff\xc0\x04Y\x90"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9f394813d4260427,
		Nodes: []uint64{
			0x882d2caf1d55aaba,
			0x8a8b733ce1852265,
			0xe452806dd1c2c3be,
		},
		Compressed: true,
	})
}

// Code generated by capnpc-go. DO NOT EDIT.

package protocols

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Device capnp.Struct

// Device_TypeID is the unique identifier for the type Device.
const Device_TypeID = 0xac50944f74fd43d0

func NewDevice(s *capnp.Segment) (Device, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Device(st), err
}

func NewRootDevice(s *capnp.Segment) (Device, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Device(st), err
}

func ReadRootDevice(msg *capnp.Message) (Device, error) {
	root, err := msg.Root()
	return Device(root.Struct()), err
}

func (s Device) String() string {
	str, _ := text.Marshal(0xac50944f74fd43d0, capnp.Struct(s))
	return str
}

func (s Device) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Device) DecodeFromPtr(p capnp.Ptr) Device {
	return Device(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Device) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Device) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Device) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Device) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Device) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Device) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Device) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Device) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Device) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Device) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Device) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Device) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Device) Applications() (Application_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Application_List(p.List()), err
}

func (s Device) HasApplications() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Device) SetApplications(v Application_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewApplications sets the applications field to a newly
// allocated Application_List, preferring placement in s's segment.
func (s Device) NewApplications(n int32) (Application_List, error) {
	l, err := NewApplication_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Application_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Device_List is a list of Device.
type Device_List = capnp.StructList[Device]

// NewDevice creates a new list of Device.
func NewDevice_List(s *capnp.Segment, sz int32) (Device_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Device](l), err
}

// Device_Future is a wrapper for a Device promised by a client call.
type Device_Future struct{ *capnp.Future }

func (f Device_Future) Struct() (Device, error) {
	p, err := f.Future.Ptr()
	return Device(p.Struct()), err
}

const schema_c3f4d6c1465a3511 = "x\xda4\xc81J\x03A\x14\xc6\xf1\xef{o\x934" +
	"\x1b\xe3\x904ZY[\x88\x166V\x11\xa3 D\x9c" +
	"W*X\x0c\x9b\x01Gt]t\xc9I<\x81\xb5\xe0" +
	"\x19\xc4\x0b\x88\x85W\x10\xb1M+#\x11\xec\xfe\xff\xdf" +
	"\xf6\x1a\xc7\xc5N\xff\xb3\x0b1\xdf\xe9\xe6\xb7\x83\x9f\xf6" +
	"\xf4\xc1?\xc1\xf5\x99\xdd\xee\xf9\xd1\xcb\xc7\xe2\x15\x1d\xed" +
	"\x01\xc33}\x1c\x86\xbf\xba\xd0g\xbc\xe7Y\x9c\xa7*" +
	"nU\x0cM\xdd\xecM\xe2\xbc\x97\xaa\xe8I+\xb5\x00" +
	"\x0a\x02\xeep\x1d\xb0\xb1\xd2\xa6BG\x8e\xb8\xc4\xe3M" +
	"\xc0&J\xf3B'2\xa2\x00\xee\xe4\x0a\xb0\xa9\xd2." +
	"\x85\x9af,!,\xc1A\x1dn\xe2\xff\xe4\xd04\xd7" +
	"\xa9\x0a-\x06\xe9\xb6\xbe\xe7\x0a\xe8\x95\\\xcd\xed\xdd\xc6" +
	"\xfe\xe2;|\x01\\\xe2o\x00\x00\x00\xff\xff\xd1K." +
	"N"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c3f4d6c1465a3511,
		Nodes: []uint64{
			0xac50944f74fd43d0,
		},
		Compressed: true,
	})
}

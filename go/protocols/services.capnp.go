// Code generated by capnpc-go. DO NOT EDIT.

package protocols

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	strconv "strconv"
)

type Ping capnp.Client

// Ping_TypeID is the unique identifier for the type Ping.
const Ping_TypeID = 0xe3e58e485a4f1d11

func (c Ping) Ping(ctx context.Context, params func(Ping_ping_Params) error) (Ping_ping_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe3e58e485a4f1d11,
			MethodID:      0,
			InterfaceName: "services.capnp:Ping",
			MethodName:    "ping",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Ping_ping_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Ping_ping_Results_Future{Future: ans.Future()}, release

}

func (c Ping) Reply(ctx context.Context, params func(Ping_reply_Params) error) (Ping_reply_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe3e58e485a4f1d11,
			MethodID:      1,
			InterfaceName: "services.capnp:Ping",
			MethodName:    "reply",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Ping_reply_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Ping_reply_Results_Future{Future: ans.Future()}, release

}

func (c Ping) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Ping) String() string {
	return "Ping(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Ping) AddRef() Ping {
	return Ping(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Ping) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Ping) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Ping) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Ping) DecodeFromPtr(p capnp.Ptr) Ping {
	return Ping(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Ping) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Ping) IsSame(other Ping) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Ping) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Ping) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Ping_Server is a Ping with a local implementation.
type Ping_Server interface {
	Ping(context.Context, Ping_ping) error

	Reply(context.Context, Ping_reply) error
}

// Ping_NewServer creates a new Server from an implementation of Ping_Server.
func Ping_NewServer(s Ping_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Ping_Methods(nil, s), s, c)
}

// Ping_ServerToClient creates a new Client from an implementation of Ping_Server.
// The caller is responsible for calling Release on the returned Client.
func Ping_ServerToClient(s Ping_Server) Ping {
	return Ping(capnp.NewClient(Ping_NewServer(s)))
}

// Ping_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Ping_Methods(methods []server.Method, s Ping_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe3e58e485a4f1d11,
			MethodID:      0,
			InterfaceName: "services.capnp:Ping",
			MethodName:    "ping",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ping(ctx, Ping_ping{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe3e58e485a4f1d11,
			MethodID:      1,
			InterfaceName: "services.capnp:Ping",
			MethodName:    "reply",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Reply(ctx, Ping_reply{call})
		},
	})

	return methods
}

// Ping_ping holds the state for a server call to Ping.ping.
// See server.Call for documentation.
type Ping_ping struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Ping_ping) Args() Ping_ping_Params {
	return Ping_ping_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Ping_ping) AllocResults() (Ping_ping_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ping_ping_Results(r), err
}

// Ping_reply holds the state for a server call to Ping.reply.
// See server.Call for documentation.
type Ping_reply struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Ping_reply) Args() Ping_reply_Params {
	return Ping_reply_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Ping_reply) AllocResults() (Ping_reply_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ping_reply_Results(r), err
}

// Ping_List is a list of Ping.
type Ping_List = capnp.CapList[Ping]

// NewPing creates a new list of Ping.
func NewPing_List(s *capnp.Segment, sz int32) (Ping_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Ping](l), err
}

type Ping_ping_Params capnp.Struct

// Ping_ping_Params_TypeID is the unique identifier for the type Ping_ping_Params.
const Ping_ping_Params_TypeID = 0xc55b1cce82d54755

func NewPing_ping_Params(s *capnp.Segment) (Ping_ping_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ping_ping_Params(st), err
}

func NewRootPing_ping_Params(s *capnp.Segment) (Ping_ping_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ping_ping_Params(st), err
}

func ReadRootPing_ping_Params(msg *capnp.Message) (Ping_ping_Params, error) {
	root, err := msg.Root()
	return Ping_ping_Params(root.Struct()), err
}

func (s Ping_ping_Params) String() string {
	str, _ := text.Marshal(0xc55b1cce82d54755, capnp.Struct(s))
	return str
}

func (s Ping_ping_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ping_ping_Params) DecodeFromPtr(p capnp.Ptr) Ping_ping_Params {
	return Ping_ping_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ping_ping_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ping_ping_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ping_ping_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ping_ping_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Ping_ping_Params_List is a list of Ping_ping_Params.
type Ping_ping_Params_List = capnp.StructList[Ping_ping_Params]

// NewPing_ping_Params creates a new list of Ping_ping_Params.
func NewPing_ping_Params_List(s *capnp.Segment, sz int32) (Ping_ping_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Ping_ping_Params](l), err
}

// Ping_ping_Params_Future is a wrapper for a Ping_ping_Params promised by a client call.
type Ping_ping_Params_Future struct{ *capnp.Future }

func (f Ping_ping_Params_Future) Struct() (Ping_ping_Params, error) {
	p, err := f.Future.Ptr()
	return Ping_ping_Params(p.Struct()), err
}

type Ping_ping_Results capnp.Struct

// Ping_ping_Results_TypeID is the unique identifier for the type Ping_ping_Results.
const Ping_ping_Results_TypeID = 0x8fabd39da5b10d7d

func NewPing_ping_Results(s *capnp.Segment) (Ping_ping_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ping_ping_Results(st), err
}

func NewRootPing_ping_Results(s *capnp.Segment) (Ping_ping_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ping_ping_Results(st), err
}

func ReadRootPing_ping_Results(msg *capnp.Message) (Ping_ping_Results, error) {
	root, err := msg.Root()
	return Ping_ping_Results(root.Struct()), err
}

func (s Ping_ping_Results) String() string {
	str, _ := text.Marshal(0x8fabd39da5b10d7d, capnp.Struct(s))
	return str
}

func (s Ping_ping_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ping_ping_Results) DecodeFromPtr(p capnp.Ptr) Ping_ping_Results {
	return Ping_ping_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ping_ping_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ping_ping_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ping_ping_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ping_ping_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ping_ping_Results) Response() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Ping_ping_Results) HasResponse() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ping_ping_Results) ResponseBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Ping_ping_Results) SetResponse(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Ping_ping_Results_List is a list of Ping_ping_Results.
type Ping_ping_Results_List = capnp.StructList[Ping_ping_Results]

// NewPing_ping_Results creates a new list of Ping_ping_Results.
func NewPing_ping_Results_List(s *capnp.Segment, sz int32) (Ping_ping_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ping_ping_Results](l), err
}

// Ping_ping_Results_Future is a wrapper for a Ping_ping_Results promised by a client call.
type Ping_ping_Results_Future struct{ *capnp.Future }

func (f Ping_ping_Results_Future) Struct() (Ping_ping_Results, error) {
	p, err := f.Future.Ptr()
	return Ping_ping_Results(p.Struct()), err
}

type Ping_reply_Params capnp.Struct

// Ping_reply_Params_TypeID is the unique identifier for the type Ping_reply_Params.
const Ping_reply_Params_TypeID = 0xd25e32640ff5189e

func NewPing_reply_Params(s *capnp.Segment) (Ping_reply_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ping_reply_Params(st), err
}

func NewRootPing_reply_Params(s *capnp.Segment) (Ping_reply_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ping_reply_Params(st), err
}

func ReadRootPing_reply_Params(msg *capnp.Message) (Ping_reply_Params, error) {
	root, err := msg.Root()
	return Ping_reply_Params(root.Struct()), err
}

func (s Ping_reply_Params) String() string {
	str, _ := text.Marshal(0xd25e32640ff5189e, capnp.Struct(s))
	return str
}

func (s Ping_reply_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ping_reply_Params) DecodeFromPtr(p capnp.Ptr) Ping_reply_Params {
	return Ping_reply_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ping_reply_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ping_reply_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ping_reply_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ping_reply_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ping_reply_Params) Msg() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Ping_reply_Params) HasMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ping_reply_Params) MsgBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Ping_reply_Params) SetMsg(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Ping_reply_Params_List is a list of Ping_reply_Params.
type Ping_reply_Params_List = capnp.StructList[Ping_reply_Params]

// NewPing_reply_Params creates a new list of Ping_reply_Params.
func NewPing_reply_Params_List(s *capnp.Segment, sz int32) (Ping_reply_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ping_reply_Params](l), err
}

// Ping_reply_Params_Future is a wrapper for a Ping_reply_Params promised by a client call.
type Ping_reply_Params_Future struct{ *capnp.Future }

func (f Ping_reply_Params_Future) Struct() (Ping_reply_Params, error) {
	p, err := f.Future.Ptr()
	return Ping_reply_Params(p.Struct()), err
}

type Ping_reply_Results capnp.Struct

// Ping_reply_Results_TypeID is the unique identifier for the type Ping_reply_Results.
const Ping_reply_Results_TypeID = 0xd846628f01a87692

func NewPing_reply_Results(s *capnp.Segment) (Ping_reply_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ping_reply_Results(st), err
}

func NewRootPing_reply_Results(s *capnp.Segment) (Ping_reply_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ping_reply_Results(st), err
}

func ReadRootPing_reply_Results(msg *capnp.Message) (Ping_reply_Results, error) {
	root, err := msg.Root()
	return Ping_reply_Results(root.Struct()), err
}

func (s Ping_reply_Results) String() string {
	str, _ := text.Marshal(0xd846628f01a87692, capnp.Struct(s))
	return str
}

func (s Ping_reply_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ping_reply_Results) DecodeFromPtr(p capnp.Ptr) Ping_reply_Results {
	return Ping_reply_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ping_reply_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ping_reply_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ping_reply_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ping_reply_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ping_reply_Results) Response() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Ping_reply_Results) HasResponse() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ping_reply_Results) ResponseBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Ping_reply_Results) SetResponse(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Ping_reply_Results_List is a list of Ping_reply_Results.
type Ping_reply_Results_List = capnp.StructList[Ping_reply_Results]

// NewPing_reply_Results creates a new list of Ping_reply_Results.
func NewPing_reply_Results_List(s *capnp.Segment, sz int32) (Ping_reply_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ping_reply_Results](l), err
}

// Ping_reply_Results_Future is a wrapper for a Ping_reply_Results promised by a client call.
type Ping_reply_Results_Future struct{ *capnp.Future }

func (f Ping_reply_Results_Future) Struct() (Ping_reply_Results, error) {
	p, err := f.Future.Ptr()
	return Ping_reply_Results(p.Struct()), err
}

type Service capnp.Struct
type Service_Which uint16

const (
	Service_Which_metrics Service_Which = 0
	Service_Which_ping    Service_Which = 1
)

func (w Service_Which) String() string {
	const s = "metricsping"
	switch w {
	case Service_Which_metrics:
		return s[0:7]
	case Service_Which_ping:
		return s[7:11]

	}
	return "Service_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0x8e7cf458a789fe4c

func NewService(s *capnp.Segment) (Service, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Service(st), err
}

func NewRootService(s *capnp.Segment) (Service, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Service(st), err
}

func ReadRootService(msg *capnp.Message) (Service, error) {
	root, err := msg.Root()
	return Service(root.Struct()), err
}

func (s Service) String() string {
	str, _ := text.Marshal(0x8e7cf458a789fe4c, capnp.Struct(s))
	return str
}

func (s Service) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service) DecodeFromPtr(p capnp.Ptr) Service {
	return Service(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Service) Which() Service_Which {
	return Service_Which(capnp.Struct(s).Uint16(0))
}
func (s Service) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Service) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Service) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Service) Metrics() Metrics {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != metrics")
	}
	p, _ := capnp.Struct(s).Ptr(1)
	return Metrics(p.Interface().Client())
}

func (s Service) HasMetrics() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Service) SetMetrics(v Metrics) error {
	capnp.Struct(s).SetUint16(0, 0)
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

func (s Service) Ping() Ping {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != ping")
	}
	p, _ := capnp.Struct(s).Ptr(1)
	return Ping(p.Interface().Client())
}

func (s Service) HasPing() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Service) SetPing(v Ping) error {
	capnp.Struct(s).SetUint16(0, 1)
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Service_List is a list of Service.
type Service_List = capnp.StructList[Service]

// NewService creates a new list of Service.
func NewService_List(s *capnp.Segment, sz int32) (Service_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Service](l), err
}

// Service_Future is a wrapper for a Service promised by a client call.
type Service_Future struct{ *capnp.Future }

func (f Service_Future) Struct() (Service, error) {
	p, err := f.Future.Ptr()
	return Service(p.Struct()), err
}
func (p Service_Future) Metrics() Metrics {
	return Metrics(p.Future.Field(1, nil).Client())
}

func (p Service_Future) Ping() Ping {
	return Ping(p.Future.Field(1, nil).Client())
}

type ServiceResolver capnp.Client

// ServiceResolver_TypeID is the unique identifier for the type ServiceResolver.
const ServiceResolver_TypeID = 0xc8edc1bb857abafa

func (c ServiceResolver) Resolve(ctx context.Context, params func(ServiceResolver_resolve_Params) error) (ServiceResolver_resolve_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc8edc1bb857abafa,
			MethodID:      0,
			InterfaceName: "services.capnp:ServiceResolver",
			MethodName:    "resolve",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ServiceResolver_resolve_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ServiceResolver_resolve_Results_Future{Future: ans.Future()}, release

}

func (c ServiceResolver) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ServiceResolver) String() string {
	return "ServiceResolver(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ServiceResolver) AddRef() ServiceResolver {
	return ServiceResolver(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ServiceResolver) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ServiceResolver) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ServiceResolver) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ServiceResolver) DecodeFromPtr(p capnp.Ptr) ServiceResolver {
	return ServiceResolver(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ServiceResolver) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ServiceResolver) IsSame(other ServiceResolver) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ServiceResolver) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ServiceResolver) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ServiceResolver_Server is a ServiceResolver with a local implementation.
type ServiceResolver_Server interface {
	Resolve(context.Context, ServiceResolver_resolve) error
}

// ServiceResolver_NewServer creates a new Server from an implementation of ServiceResolver_Server.
func ServiceResolver_NewServer(s ServiceResolver_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ServiceResolver_Methods(nil, s), s, c)
}

// ServiceResolver_ServerToClient creates a new Client from an implementation of ServiceResolver_Server.
// The caller is responsible for calling Release on the returned Client.
func ServiceResolver_ServerToClient(s ServiceResolver_Server) ServiceResolver {
	return ServiceResolver(capnp.NewClient(ServiceResolver_NewServer(s)))
}

// ServiceResolver_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ServiceResolver_Methods(methods []server.Method, s ServiceResolver_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc8edc1bb857abafa,
			MethodID:      0,
			InterfaceName: "services.capnp:ServiceResolver",
			MethodName:    "resolve",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Resolve(ctx, ServiceResolver_resolve{call})
		},
	})

	return methods
}

// ServiceResolver_resolve holds the state for a server call to ServiceResolver.resolve.
// See server.Call for documentation.
type ServiceResolver_resolve struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ServiceResolver_resolve) Args() ServiceResolver_resolve_Params {
	return ServiceResolver_resolve_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ServiceResolver_resolve) AllocResults() (ServiceResolver_resolve_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceResolver_resolve_Results(r), err
}

// ServiceResolver_List is a list of ServiceResolver.
type ServiceResolver_List = capnp.CapList[ServiceResolver]

// NewServiceResolver creates a new list of ServiceResolver.
func NewServiceResolver_List(s *capnp.Segment, sz int32) (ServiceResolver_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ServiceResolver](l), err
}

type ServiceResolver_resolve_Params capnp.Struct

// ServiceResolver_resolve_Params_TypeID is the unique identifier for the type ServiceResolver_resolve_Params.
const ServiceResolver_resolve_Params_TypeID = 0x8fb0a4b56b8ee1ac

func NewServiceResolver_resolve_Params(s *capnp.Segment) (ServiceResolver_resolve_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ServiceResolver_resolve_Params(st), err
}

func NewRootServiceResolver_resolve_Params(s *capnp.Segment) (ServiceResolver_resolve_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ServiceResolver_resolve_Params(st), err
}

func ReadRootServiceResolver_resolve_Params(msg *capnp.Message) (ServiceResolver_resolve_Params, error) {
	root, err := msg.Root()
	return ServiceResolver_resolve_Params(root.Struct()), err
}

func (s ServiceResolver_resolve_Params) String() string {
	str, _ := text.Marshal(0x8fb0a4b56b8ee1ac, capnp.Struct(s))
	return str
}

func (s ServiceResolver_resolve_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServiceResolver_resolve_Params) DecodeFromPtr(p capnp.Ptr) ServiceResolver_resolve_Params {
	return ServiceResolver_resolve_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServiceResolver_resolve_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServiceResolver_resolve_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServiceResolver_resolve_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServiceResolver_resolve_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ServiceResolver_resolve_Params_List is a list of ServiceResolver_resolve_Params.
type ServiceResolver_resolve_Params_List = capnp.StructList[ServiceResolver_resolve_Params]

// NewServiceResolver_resolve_Params creates a new list of ServiceResolver_resolve_Params.
func NewServiceResolver_resolve_Params_List(s *capnp.Segment, sz int32) (ServiceResolver_resolve_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ServiceResolver_resolve_Params](l), err
}

// ServiceResolver_resolve_Params_Future is a wrapper for a ServiceResolver_resolve_Params promised by a client call.
type ServiceResolver_resolve_Params_Future struct{ *capnp.Future }

func (f ServiceResolver_resolve_Params_Future) Struct() (ServiceResolver_resolve_Params, error) {
	p, err := f.Future.Ptr()
	return ServiceResolver_resolve_Params(p.Struct()), err
}

type ServiceResolver_resolve_Results capnp.Struct

// ServiceResolver_resolve_Results_TypeID is the unique identifier for the type ServiceResolver_resolve_Results.
const ServiceResolver_resolve_Results_TypeID = 0xa4962bdd3a2482aa

func NewServiceResolver_resolve_Results(s *capnp.Segment) (ServiceResolver_resolve_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceResolver_resolve_Results(st), err
}

func NewRootServiceResolver_resolve_Results(s *capnp.Segment) (ServiceResolver_resolve_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceResolver_resolve_Results(st), err
}

func ReadRootServiceResolver_resolve_Results(msg *capnp.Message) (ServiceResolver_resolve_Results, error) {
	root, err := msg.Root()
	return ServiceResolver_resolve_Results(root.Struct()), err
}

func (s ServiceResolver_resolve_Results) String() string {
	str, _ := text.Marshal(0xa4962bdd3a2482aa, capnp.Struct(s))
	return str
}

func (s ServiceResolver_resolve_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServiceResolver_resolve_Results) DecodeFromPtr(p capnp.Ptr) ServiceResolver_resolve_Results {
	return ServiceResolver_resolve_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServiceResolver_resolve_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServiceResolver_resolve_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServiceResolver_resolve_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServiceResolver_resolve_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServiceResolver_resolve_Results) Services() (Service_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Service_List(p.List()), err
}

func (s ServiceResolver_resolve_Results) HasServices() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServiceResolver_resolve_Results) SetServices(v Service_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewServices sets the services field to a newly
// allocated Service_List, preferring placement in s's segment.
func (s ServiceResolver_resolve_Results) NewServices(n int32) (Service_List, error) {
	l, err := NewService_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Service_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// ServiceResolver_resolve_Results_List is a list of ServiceResolver_resolve_Results.
type ServiceResolver_resolve_Results_List = capnp.StructList[ServiceResolver_resolve_Results]

// NewServiceResolver_resolve_Results creates a new list of ServiceResolver_resolve_Results.
func NewServiceResolver_resolve_Results_List(s *capnp.Segment, sz int32) (ServiceResolver_resolve_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceResolver_resolve_Results](l), err
}

// ServiceResolver_resolve_Results_Future is a wrapper for a ServiceResolver_resolve_Results promised by a client call.
type ServiceResolver_resolve_Results_Future struct{ *capnp.Future }

func (f ServiceResolver_resolve_Results_Future) Struct() (ServiceResolver_resolve_Results, error) {
	p, err := f.Future.Ptr()
	return ServiceResolver_resolve_Results(p.Struct()), err
}

type ServiceManager capnp.Client

// ServiceManager_TypeID is the unique identifier for the type ServiceManager.
const ServiceManager_TypeID = 0x853c400683d24a62

func (c ServiceManager) List(ctx context.Context, params func(ServiceManager_list_Params) error) (ServiceManager_list_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x853c400683d24a62,
			MethodID:      0,
			InterfaceName: "services.capnp:ServiceManager",
			MethodName:    "list",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ServiceManager_list_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ServiceManager_list_Results_Future{Future: ans.Future()}, release

}

func (c ServiceManager) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ServiceManager) String() string {
	return "ServiceManager(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ServiceManager) AddRef() ServiceManager {
	return ServiceManager(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ServiceManager) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ServiceManager) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ServiceManager) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ServiceManager) DecodeFromPtr(p capnp.Ptr) ServiceManager {
	return ServiceManager(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ServiceManager) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ServiceManager) IsSame(other ServiceManager) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ServiceManager) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ServiceManager) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ServiceManager_Server is a ServiceManager with a local implementation.
type ServiceManager_Server interface {
	List(context.Context, ServiceManager_list) error
}

// ServiceManager_NewServer creates a new Server from an implementation of ServiceManager_Server.
func ServiceManager_NewServer(s ServiceManager_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ServiceManager_Methods(nil, s), s, c)
}

// ServiceManager_ServerToClient creates a new Client from an implementation of ServiceManager_Server.
// The caller is responsible for calling Release on the returned Client.
func ServiceManager_ServerToClient(s ServiceManager_Server) ServiceManager {
	return ServiceManager(capnp.NewClient(ServiceManager_NewServer(s)))
}

// ServiceManager_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ServiceManager_Methods(methods []server.Method, s ServiceManager_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x853c400683d24a62,
			MethodID:      0,
			InterfaceName: "services.capnp:ServiceManager",
			MethodName:    "list",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.List(ctx, ServiceManager_list{call})
		},
	})

	return methods
}

// ServiceManager_list holds the state for a server call to ServiceManager.list.
// See server.Call for documentation.
type ServiceManager_list struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ServiceManager_list) Args() ServiceManager_list_Params {
	return ServiceManager_list_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ServiceManager_list) AllocResults() (ServiceManager_list_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceManager_list_Results(r), err
}

// ServiceManager_List is a list of ServiceManager.
type ServiceManager_List = capnp.CapList[ServiceManager]

// NewServiceManager creates a new list of ServiceManager.
func NewServiceManager_List(s *capnp.Segment, sz int32) (ServiceManager_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ServiceManager](l), err
}

type ServiceManager_list_Params capnp.Struct

// ServiceManager_list_Params_TypeID is the unique identifier for the type ServiceManager_list_Params.
const ServiceManager_list_Params_TypeID = 0xd77c96619c671f6a

func NewServiceManager_list_Params(s *capnp.Segment) (ServiceManager_list_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ServiceManager_list_Params(st), err
}

func NewRootServiceManager_list_Params(s *capnp.Segment) (ServiceManager_list_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ServiceManager_list_Params(st), err
}

func ReadRootServiceManager_list_Params(msg *capnp.Message) (ServiceManager_list_Params, error) {
	root, err := msg.Root()
	return ServiceManager_list_Params(root.Struct()), err
}

func (s ServiceManager_list_Params) String() string {
	str, _ := text.Marshal(0xd77c96619c671f6a, capnp.Struct(s))
	return str
}

func (s ServiceManager_list_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServiceManager_list_Params) DecodeFromPtr(p capnp.Ptr) ServiceManager_list_Params {
	return ServiceManager_list_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServiceManager_list_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServiceManager_list_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServiceManager_list_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServiceManager_list_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ServiceManager_list_Params_List is a list of ServiceManager_list_Params.
type ServiceManager_list_Params_List = capnp.StructList[ServiceManager_list_Params]

// NewServiceManager_list_Params creates a new list of ServiceManager_list_Params.
func NewServiceManager_list_Params_List(s *capnp.Segment, sz int32) (ServiceManager_list_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ServiceManager_list_Params](l), err
}

// ServiceManager_list_Params_Future is a wrapper for a ServiceManager_list_Params promised by a client call.
type ServiceManager_list_Params_Future struct{ *capnp.Future }

func (f ServiceManager_list_Params_Future) Struct() (ServiceManager_list_Params, error) {
	p, err := f.Future.Ptr()
	return ServiceManager_list_Params(p.Struct()), err
}

type ServiceManager_list_Results capnp.Struct

// ServiceManager_list_Results_TypeID is the unique identifier for the type ServiceManager_list_Results.
const ServiceManager_list_Results_TypeID = 0xb1bc93459e9da15a

func NewServiceManager_list_Results(s *capnp.Segment) (ServiceManager_list_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceManager_list_Results(st), err
}

func NewRootServiceManager_list_Results(s *capnp.Segment) (ServiceManager_list_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceManager_list_Results(st), err
}

func ReadRootServiceManager_list_Results(msg *capnp.Message) (ServiceManager_list_Results, error) {
	root, err := msg.Root()
	return ServiceManager_list_Results(root.Struct()), err
}

func (s ServiceManager_list_Results) String() string {
	str, _ := text.Marshal(0xb1bc93459e9da15a, capnp.Struct(s))
	return str
}

func (s ServiceManager_list_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServiceManager_list_Results) DecodeFromPtr(p capnp.Ptr) ServiceManager_list_Results {
	return ServiceManager_list_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServiceManager_list_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServiceManager_list_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServiceManager_list_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServiceManager_list_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServiceManager_list_Results) Services() (Service_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Service_List(p.List()), err
}

func (s ServiceManager_list_Results) HasServices() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServiceManager_list_Results) SetServices(v Service_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewServices sets the services field to a newly
// allocated Service_List, preferring placement in s's segment.
func (s ServiceManager_list_Results) NewServices(n int32) (Service_List, error) {
	l, err := NewService_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Service_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// ServiceManager_list_Results_List is a list of ServiceManager_list_Results.
type ServiceManager_list_Results_List = capnp.StructList[ServiceManager_list_Results]

// NewServiceManager_list_Results creates a new list of ServiceManager_list_Results.
func NewServiceManager_list_Results_List(s *capnp.Segment, sz int32) (ServiceManager_list_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceManager_list_Results](l), err
}

// ServiceManager_list_Results_Future is a wrapper for a ServiceManager_list_Results promised by a client call.
type ServiceManager_list_Results_Future struct{ *capnp.Future }

func (f ServiceManager_list_Results_Future) Struct() (ServiceManager_list_Results, error) {
	p, err := f.Future.Ptr()
	return ServiceManager_list_Results(p.Struct()), err
}

type ServiceType uint16

// ServiceType_TypeID is the unique identifier for the type ServiceType.
const ServiceType_TypeID = 0xaa02ccb4f31a6c80

// Values of ServiceType.
const (
	ServiceType_ping    ServiceType = 0
	ServiceType_metrics ServiceType = 1
)

// String returns the enum's constant name.
func (c ServiceType) String() string {
	switch c {
	case ServiceType_ping:
		return "ping"
	case ServiceType_metrics:
		return "metrics"

	default:
		return ""
	}
}

// ServiceTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ServiceTypeFromString(c string) ServiceType {
	switch c {
	case "ping":
		return ServiceType_ping
	case "metrics":
		return ServiceType_metrics

	default:
		return 0
	}
}

type ServiceType_List = capnp.EnumList[ServiceType]

func NewServiceType_List(s *capnp.Segment, sz int32) (ServiceType_List, error) {
	return capnp.NewEnumList[ServiceType](s, sz)
}

const schema_84619e3f4ed62791 = "x\xda\xacT]h\x1cU\x14>\xe7\xde\x99\x9d(\xbb" +
	"\xae\xd7\xd9\x87D\x8cK$A\x89\xb0\x98\x04\x11\x83\xb2" +
	"Kp\xcd\x0fY\x9dY#h\x14a\x12\xc7euw" +
	"\xb2\xce$\x81\x84H$\x1a\xd4\x97\x84(\x04\x04\x13P" +
	"\"j,\xb4\x81\x06J\xda>\xb44\xd0\x87\xd2\x87\x94" +
	"\xfeP\xc8C)y\xc8C)\xfd\xd9\x87\x06\x9a)\xf7" +
	"Nf7\xdb4m)}\xbbs\xe6\x9c\xef\xfb\xeew" +
	"\xce=o\x04HBj\x0a]W\x80\xe8\x9f\xcb\x01\xb7" +
	"\xafk\xed\x87@\xe2\x9dI`a\xea\xce\xbcz\xe1\x83" +
	"\xf8\xbc\xf1#\x00\xaa\xeb\xf4\xa6\xbaI\x15\x00u\x83\xb6" +
	"\xab!I\x01p\xbb\xb7\x7f\xf9\xe7\x93\xdbcS\xa0\x87" +
	"\x11\xcb\xd9I\xa2\x10\x00\xb5HW\xd4\xbb\xa2\xe2\x0e=" +
	"\x08\xe8~\x17Z\xfa{\xee\xdc\xff\xd3\xc0\"\x08 \xa3" +
	"\x02\xd02#=\x8b\x80\xea\xefR\x1c\xd0=pe\xea" +
	"\x9b\xe5\x85C\xd3\xc0\xa2\x08\xc0\x19Z\x8eK6\x82\xe4" +
	".N\xd4\xb7\xae\xbf>\xbb\xe0\xfd\xf1J\xff\x93Fy" +
	"\xe9\xb2(\xfd>\xf7\xe2\xad\xc3g\xc8\"\xb00\xa9\x90" +
	"\xbd)]V\x8b\x1cJ\xbd!\xbd\x05\xe8\xf6\xfe97" +
	"\x9f\xfc\xed\xd8\x12\xb0\x97KHE\xa9\x97#\xa1\xcc\x91" +
	">n??q\xf6\xa5\xcfV=\x95B\xc4\x9b2\xe1" +
	"\"\xb6VF'\x8f\x9e\xb8vz\x8f55\xf2\x96\xda" +
	" s\x8e:\xb9]\xed\xe4'w\xbe\xba\x18\xfe\xb2\xf9" +
	"\x8b\xb5\xdd\x97m\x92\xc5e\xdf\x16<_G3\x7f\x18" +
	"\xb3c\x17=!\x82\xe7S9\xcdy~\x1d\xfe\x17\xa7" +
	"\xfb\xde\xbf\xb4\xbb4)\xbf\xc0KS\xa2\x94\xd5~\xd8" +
	"\xdb1\xb5qu\x8f\x90o\xe5\xbf\xd4\x11!dH\xfe" +
	"I]\x95\x15\xb0\\\xc7\xb4\x87\xb3\xfd\xa6Cb\xfdF" +
	"\xc1*\xb4~\xe4}\xa7\x8c\xa8edL[C\xd4%" +
	"*\x03\x94\x04\xa1o\x11c\x8d@\x98\xac\x84sYg" +
	"0\x81\x1ab\x09\x0c}\xb0\xb8\x17\xe0(A*\x01H" +
	"\x08\xc0\x92\x8d\x00z\x82\xa2\xdeM\xb0\x16]\x17#\xc8" +
	"\xc3\x9dm\x00\xfa{\x14u\x8d`-\xd9\xe6a\x02\xc0" +
	"R<\xbb\x83\xa2\xdeC0l\x19y\x13\x83@0\x08" +
	"8\x9e7\x07\xedl\xbf\x83\xcc\xfd\xead\xa4\xee\xe7w" +
	"O\x1d\x01@d\x80\xe1B\xd6\xca +\x1b\xe1\x85K" +
	"\xf2\xe8\x8e<-keb<\xb7>m:C\xb9A" +
	"\x07@\x97J2C]\x00z\x90\xa2^M\xd0\xb5M" +
	"\xa70`9&\x00\xf8\xfc%8\xa9\xd2\xba\xb4\xe9\x0c" +
	"\xe4\x86M;f{\x87z-j\xd8F\xdey\xec\xfc" +
	"t\xdcS\xf3 -\xaf\x912/\xd7\xf2\x1c\xa0F\x11" +
	"\x9f/\xbf5@\x1e\xdc\xaf\xaf=#\xb4 \xdaQ%" +
	"\xcce\x8d\xc2\x9bg\xda\x00\x84i\xbe\xa7\xfbiM\x19" +
	"b*b\xbc\xe5\x9ei\xf4)\xe9\x0c\xec\xe9\x89&\\" +
	"\x03?\xe1~\xd3\xe2\x9ek\xe5\x01\xf5\xd7\x03\xfa\xdb\x80" +
	"\xb161\xa0\xe3;\xc6V\xceh\xc5\x10\xd8f!7" +
	"\xe23V\x0c\xc1+\x00z\x15E=BP\xc9;\x99" +
	"G5\xbf\xc2 \x81\x87\xce\xc3(\xbd\xc1C\xe7I\xe6" +
	"\xce\x7fe\x9a\x92\xb52\xa2\xa7\xc2\x07\x7fC\xa1\xbfP" +
	"Y\x13\x7f\xa8\x0d\x0abi\xed\xa0\xbfDXM3\x10" +
	"\x16RD\xf7\x13\x18\x15\xaa\x84Q\xf7\x02\x00\x00\xff\xff" +
	"\x96\x87\xb0\xcb"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_84619e3f4ed62791,
		Nodes: []uint64{
			0x853c400683d24a62,
			0x8e7cf458a789fe4c,
			0x8fabd39da5b10d7d,
			0x8fb0a4b56b8ee1ac,
			0xa4962bdd3a2482aa,
			0xaa02ccb4f31a6c80,
			0xb1bc93459e9da15a,
			0xc55b1cce82d54755,
			0xc8edc1bb857abafa,
			0xd25e32640ff5189e,
			0xd77c96619c671f6a,
			0xd846628f01a87692,
			0xe3e58e485a4f1d11,
		},
		Compressed: true,
	})
}

// Code generated by capnpc-go. DO NOT EDIT.

package protocols

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Ping capnp.Client

// Ping_TypeID is the unique identifier for the type Ping.
const Ping_TypeID = 0xc9a16275df120018

func (c Ping) Ping(ctx context.Context, params func(Ping_ping_Params) error) (Ping_ping_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc9a16275df120018,
			MethodID:      0,
			InterfaceName: "core.capnp:Ping",
			MethodName:    "ping",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Ping_ping_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Ping_ping_Results_Future{Future: ans.Future()}, release

}

func (c Ping) Reply(ctx context.Context, params func(Ping_reply_Params) error) (Ping_reply_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc9a16275df120018,
			MethodID:      1,
			InterfaceName: "core.capnp:Ping",
			MethodName:    "reply",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Ping_reply_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Ping_reply_Results_Future{Future: ans.Future()}, release

}

func (c Ping) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Ping) String() string {
	return "Ping(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Ping) AddRef() Ping {
	return Ping(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Ping) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Ping) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Ping) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Ping) DecodeFromPtr(p capnp.Ptr) Ping {
	return Ping(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Ping) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Ping) IsSame(other Ping) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Ping) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Ping) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Ping_Server is a Ping with a local implementation.
type Ping_Server interface {
	Ping(context.Context, Ping_ping) error

	Reply(context.Context, Ping_reply) error
}

// Ping_NewServer creates a new Server from an implementation of Ping_Server.
func Ping_NewServer(s Ping_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Ping_Methods(nil, s), s, c)
}

// Ping_ServerToClient creates a new Client from an implementation of Ping_Server.
// The caller is responsible for calling Release on the returned Client.
func Ping_ServerToClient(s Ping_Server) Ping {
	return Ping(capnp.NewClient(Ping_NewServer(s)))
}

// Ping_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Ping_Methods(methods []server.Method, s Ping_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc9a16275df120018,
			MethodID:      0,
			InterfaceName: "core.capnp:Ping",
			MethodName:    "ping",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ping(ctx, Ping_ping{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc9a16275df120018,
			MethodID:      1,
			InterfaceName: "core.capnp:Ping",
			MethodName:    "reply",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Reply(ctx, Ping_reply{call})
		},
	})

	return methods
}

// Ping_ping holds the state for a server call to Ping.ping.
// See server.Call for documentation.
type Ping_ping struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Ping_ping) Args() Ping_ping_Params {
	return Ping_ping_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Ping_ping) AllocResults() (Ping_ping_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ping_ping_Results(r), err
}

// Ping_reply holds the state for a server call to Ping.reply.
// See server.Call for documentation.
type Ping_reply struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Ping_reply) Args() Ping_reply_Params {
	return Ping_reply_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Ping_reply) AllocResults() (Ping_reply_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ping_reply_Results(r), err
}

// Ping_List is a list of Ping.
type Ping_List = capnp.CapList[Ping]

// NewPing creates a new list of Ping.
func NewPing_List(s *capnp.Segment, sz int32) (Ping_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Ping](l), err
}

type Ping_ping_Params capnp.Struct

// Ping_ping_Params_TypeID is the unique identifier for the type Ping_ping_Params.
const Ping_ping_Params_TypeID = 0xd4d52a2375403f7d

func NewPing_ping_Params(s *capnp.Segment) (Ping_ping_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ping_ping_Params(st), err
}

func NewRootPing_ping_Params(s *capnp.Segment) (Ping_ping_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Ping_ping_Params(st), err
}

func ReadRootPing_ping_Params(msg *capnp.Message) (Ping_ping_Params, error) {
	root, err := msg.Root()
	return Ping_ping_Params(root.Struct()), err
}

func (s Ping_ping_Params) String() string {
	str, _ := text.Marshal(0xd4d52a2375403f7d, capnp.Struct(s))
	return str
}

func (s Ping_ping_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ping_ping_Params) DecodeFromPtr(p capnp.Ptr) Ping_ping_Params {
	return Ping_ping_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ping_ping_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ping_ping_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ping_ping_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ping_ping_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Ping_ping_Params_List is a list of Ping_ping_Params.
type Ping_ping_Params_List = capnp.StructList[Ping_ping_Params]

// NewPing_ping_Params creates a new list of Ping_ping_Params.
func NewPing_ping_Params_List(s *capnp.Segment, sz int32) (Ping_ping_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Ping_ping_Params](l), err
}

// Ping_ping_Params_Future is a wrapper for a Ping_ping_Params promised by a client call.
type Ping_ping_Params_Future struct{ *capnp.Future }

func (f Ping_ping_Params_Future) Struct() (Ping_ping_Params, error) {
	p, err := f.Future.Ptr()
	return Ping_ping_Params(p.Struct()), err
}

type Ping_ping_Results capnp.Struct

// Ping_ping_Results_TypeID is the unique identifier for the type Ping_ping_Results.
const Ping_ping_Results_TypeID = 0xf049f70e7d922dcf

func NewPing_ping_Results(s *capnp.Segment) (Ping_ping_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ping_ping_Results(st), err
}

func NewRootPing_ping_Results(s *capnp.Segment) (Ping_ping_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ping_ping_Results(st), err
}

func ReadRootPing_ping_Results(msg *capnp.Message) (Ping_ping_Results, error) {
	root, err := msg.Root()
	return Ping_ping_Results(root.Struct()), err
}

func (s Ping_ping_Results) String() string {
	str, _ := text.Marshal(0xf049f70e7d922dcf, capnp.Struct(s))
	return str
}

func (s Ping_ping_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ping_ping_Results) DecodeFromPtr(p capnp.Ptr) Ping_ping_Results {
	return Ping_ping_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ping_ping_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ping_ping_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ping_ping_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ping_ping_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ping_ping_Results) Response() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Ping_ping_Results) HasResponse() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ping_ping_Results) ResponseBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Ping_ping_Results) SetResponse(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Ping_ping_Results_List is a list of Ping_ping_Results.
type Ping_ping_Results_List = capnp.StructList[Ping_ping_Results]

// NewPing_ping_Results creates a new list of Ping_ping_Results.
func NewPing_ping_Results_List(s *capnp.Segment, sz int32) (Ping_ping_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ping_ping_Results](l), err
}

// Ping_ping_Results_Future is a wrapper for a Ping_ping_Results promised by a client call.
type Ping_ping_Results_Future struct{ *capnp.Future }

func (f Ping_ping_Results_Future) Struct() (Ping_ping_Results, error) {
	p, err := f.Future.Ptr()
	return Ping_ping_Results(p.Struct()), err
}

type Ping_reply_Params capnp.Struct

// Ping_reply_Params_TypeID is the unique identifier for the type Ping_reply_Params.
const Ping_reply_Params_TypeID = 0xfb2c257e738bb1d7

func NewPing_reply_Params(s *capnp.Segment) (Ping_reply_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ping_reply_Params(st), err
}

func NewRootPing_reply_Params(s *capnp.Segment) (Ping_reply_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ping_reply_Params(st), err
}

func ReadRootPing_reply_Params(msg *capnp.Message) (Ping_reply_Params, error) {
	root, err := msg.Root()
	return Ping_reply_Params(root.Struct()), err
}

func (s Ping_reply_Params) String() string {
	str, _ := text.Marshal(0xfb2c257e738bb1d7, capnp.Struct(s))
	return str
}

func (s Ping_reply_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ping_reply_Params) DecodeFromPtr(p capnp.Ptr) Ping_reply_Params {
	return Ping_reply_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ping_reply_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ping_reply_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ping_reply_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ping_reply_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ping_reply_Params) Msg() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Ping_reply_Params) HasMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ping_reply_Params) MsgBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Ping_reply_Params) SetMsg(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Ping_reply_Params_List is a list of Ping_reply_Params.
type Ping_reply_Params_List = capnp.StructList[Ping_reply_Params]

// NewPing_reply_Params creates a new list of Ping_reply_Params.
func NewPing_reply_Params_List(s *capnp.Segment, sz int32) (Ping_reply_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ping_reply_Params](l), err
}

// Ping_reply_Params_Future is a wrapper for a Ping_reply_Params promised by a client call.
type Ping_reply_Params_Future struct{ *capnp.Future }

func (f Ping_reply_Params_Future) Struct() (Ping_reply_Params, error) {
	p, err := f.Future.Ptr()
	return Ping_reply_Params(p.Struct()), err
}

type Ping_reply_Results capnp.Struct

// Ping_reply_Results_TypeID is the unique identifier for the type Ping_reply_Results.
const Ping_reply_Results_TypeID = 0xc44733e53fc6dab3

func NewPing_reply_Results(s *capnp.Segment) (Ping_reply_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ping_reply_Results(st), err
}

func NewRootPing_reply_Results(s *capnp.Segment) (Ping_reply_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Ping_reply_Results(st), err
}

func ReadRootPing_reply_Results(msg *capnp.Message) (Ping_reply_Results, error) {
	root, err := msg.Root()
	return Ping_reply_Results(root.Struct()), err
}

func (s Ping_reply_Results) String() string {
	str, _ := text.Marshal(0xc44733e53fc6dab3, capnp.Struct(s))
	return str
}

func (s Ping_reply_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Ping_reply_Results) DecodeFromPtr(p capnp.Ptr) Ping_reply_Results {
	return Ping_reply_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Ping_reply_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Ping_reply_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Ping_reply_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Ping_reply_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Ping_reply_Results) Response() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Ping_reply_Results) HasResponse() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Ping_reply_Results) ResponseBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Ping_reply_Results) SetResponse(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Ping_reply_Results_List is a list of Ping_reply_Results.
type Ping_reply_Results_List = capnp.StructList[Ping_reply_Results]

// NewPing_reply_Results creates a new list of Ping_reply_Results.
func NewPing_reply_Results_List(s *capnp.Segment, sz int32) (Ping_reply_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Ping_reply_Results](l), err
}

// Ping_reply_Results_Future is a wrapper for a Ping_reply_Results promised by a client call.
type Ping_reply_Results_Future struct{ *capnp.Future }

func (f Ping_reply_Results_Future) Struct() (Ping_reply_Results, error) {
	p, err := f.Future.Ptr()
	return Ping_reply_Results(p.Struct()), err
}

const schema_f2a4c92f4415d4a0 = "x\xda\x128\xe2\xc0b\xc8+\xcf\xcc\xc0\x14\xa8\xc2\xca" +
	"\xf6\x7f\xf3\xadc\xf6O\x8d\xdd\x8f0\x08\x0a020" +
	"\xb02\xb230\x08\x972~b`\x14\xaed\xb4g" +
	"`\xfc+!t\xbf4i\xe1IAn\xe6\xff\x0b\xae" +
	"\x88\xba\xe8\x9f\\\xf2\x89\x81\x81Qx.c\x93\xf0B" +
	"\xb0\xe2\xb9\x8c\xed\xc2oA\xac\xff\xb5\xf6\x0e\xa5\xcaZ" +
	"W\xaf@\x8cb\x01I^e|\xc4\xc0\xf2\xff\xbc\xee" +
	"\xa4Z\xbe\xef\x9e\x1f\x90\xed\xd8\xc9\xf8\x8a\x81Qx/" +
	"\xc8\x8e\xff\xd77v\x17\xd7\xa9\xea\xfcF\x96\x7f\x08\x96" +
	"\x7f\xcah\xcf\xa0\xfb?9\xbf(U/9\xb1\x80)" +
	"\xaf\xc0* 3/]\xaf(\xb5 \xa7R%(U" +
	"\xbe\xb84\xa7\xa48\x90\x85\x99\x85\x81\x81\x85\x91\x81A" +
	"\x90\xd7\x8b\x81!\x90\x87\x991P\x82\x89\xf1\x7fQj" +
	"qA~^q*\x03\x03\x03#\x0f\x03\x13#\x0f\x03" +
	"#\xdc(F\xa8Q\x0c\x01\x8c\x8c\x81\x1c\xcc\xacH\xce" +
	"g\x849W\xd0P\x8b\x81IP\x95\x9d\x11\xe1BF" +
	"Xp\x09J\x1a10\x09\xf2\xb2\xf3\x17d\xe6\xa5;" +
	"0\xca\x83]\xe4\xc0\x18\xc0\xc8\x88\xe9Z\x90\x12\x95\x80" +
	"\xc4\"\xf6\xc4\xdcb\x1c\xb2A\xa9\xc5\xfc\xe4z\x05-" +
	"T\x02\x12\xf9\x8b\x12sQLRb`\x08\xe4`f" +
	"\x0c\x14abd\xcf-N\x87\x99\x00\x08\x00\x00\xff\xff" +
	"\x86\xd0\x8dh"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_f2a4c92f4415d4a0,
		Nodes: []uint64{
			0xc44733e53fc6dab3,
			0xc9a16275df120018,
			0xd4d52a2375403f7d,
			0xf049f70e7d922dcf,
			0xfb2c257e738bb1d7,
		},
		Compressed: true,
	})
}

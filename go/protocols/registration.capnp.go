// Code generated by capnpc-go. DO NOT EDIT.

package protocols

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	strconv "strconv"
)

type ServiceRequest capnp.Struct

// ServiceRequest_TypeID is the unique identifier for the type ServiceRequest.
const ServiceRequest_TypeID = 0xffbe60262c7f6d1c

func NewServiceRequest(s *capnp.Segment) (ServiceRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceRequest(st), err
}

func NewRootServiceRequest(s *capnp.Segment) (ServiceRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceRequest(st), err
}

func ReadRootServiceRequest(msg *capnp.Message) (ServiceRequest, error) {
	root, err := msg.Root()
	return ServiceRequest(root.Struct()), err
}

func (s ServiceRequest) String() string {
	str, _ := text.Marshal(0xffbe60262c7f6d1c, capnp.Struct(s))
	return str
}

func (s ServiceRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServiceRequest) DecodeFromPtr(p capnp.Ptr) ServiceRequest {
	return ServiceRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServiceRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServiceRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServiceRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServiceRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServiceRequest) Reason() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ServiceRequest) HasReason() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServiceRequest) ReasonBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceRequest) SetReason(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ServiceRequest_List is a list of ServiceRequest.
type ServiceRequest_List = capnp.StructList[ServiceRequest]

// NewServiceRequest creates a new list of ServiceRequest.
func NewServiceRequest_List(s *capnp.Segment, sz int32) (ServiceRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceRequest](l), err
}

// ServiceRequest_Future is a wrapper for a ServiceRequest promised by a client call.
type ServiceRequest_Future struct{ *capnp.Future }

func (f ServiceRequest_Future) Struct() (ServiceRequest, error) {
	p, err := f.Future.Ptr()
	return ServiceRequest(p.Struct()), err
}

type RegistrationCallback capnp.Client

// RegistrationCallback_TypeID is the unique identifier for the type RegistrationCallback.
const RegistrationCallback_TypeID = 0xc9fb12948fb0b7df

func (c RegistrationCallback) Success(ctx context.Context, params func(RegistrationCallback_success_Params) error) (RegistrationCallback_success_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc9fb12948fb0b7df,
			MethodID:      0,
			InterfaceName: "registration.capnp:RegistrationCallback",
			MethodName:    "success",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RegistrationCallback_success_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RegistrationCallback_success_Results_Future{Future: ans.Future()}, release

}

func (c RegistrationCallback) Failure(ctx context.Context, params func(RegistrationCallback_failure_Params) error) (RegistrationCallback_failure_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc9fb12948fb0b7df,
			MethodID:      1,
			InterfaceName: "registration.capnp:RegistrationCallback",
			MethodName:    "failure",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RegistrationCallback_failure_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RegistrationCallback_failure_Results_Future{Future: ans.Future()}, release

}

func (c RegistrationCallback) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c RegistrationCallback) String() string {
	return "RegistrationCallback(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c RegistrationCallback) AddRef() RegistrationCallback {
	return RegistrationCallback(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c RegistrationCallback) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c RegistrationCallback) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c RegistrationCallback) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (RegistrationCallback) DecodeFromPtr(p capnp.Ptr) RegistrationCallback {
	return RegistrationCallback(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c RegistrationCallback) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c RegistrationCallback) IsSame(other RegistrationCallback) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c RegistrationCallback) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c RegistrationCallback) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A RegistrationCallback_Server is a RegistrationCallback with a local implementation.
type RegistrationCallback_Server interface {
	Success(context.Context, RegistrationCallback_success) error

	Failure(context.Context, RegistrationCallback_failure) error
}

// RegistrationCallback_NewServer creates a new Server from an implementation of RegistrationCallback_Server.
func RegistrationCallback_NewServer(s RegistrationCallback_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RegistrationCallback_Methods(nil, s), s, c)
}

// RegistrationCallback_ServerToClient creates a new Client from an implementation of RegistrationCallback_Server.
// The caller is responsible for calling Release on the returned Client.
func RegistrationCallback_ServerToClient(s RegistrationCallback_Server) RegistrationCallback {
	return RegistrationCallback(capnp.NewClient(RegistrationCallback_NewServer(s)))
}

// RegistrationCallback_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RegistrationCallback_Methods(methods []server.Method, s RegistrationCallback_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc9fb12948fb0b7df,
			MethodID:      0,
			InterfaceName: "registration.capnp:RegistrationCallback",
			MethodName:    "success",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Success(ctx, RegistrationCallback_success{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc9fb12948fb0b7df,
			MethodID:      1,
			InterfaceName: "registration.capnp:RegistrationCallback",
			MethodName:    "failure",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Failure(ctx, RegistrationCallback_failure{call})
		},
	})

	return methods
}

// RegistrationCallback_success holds the state for a server call to RegistrationCallback.success.
// See server.Call for documentation.
type RegistrationCallback_success struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RegistrationCallback_success) Args() RegistrationCallback_success_Params {
	return RegistrationCallback_success_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RegistrationCallback_success) AllocResults() (RegistrationCallback_success_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RegistrationCallback_success_Results(r), err
}

// RegistrationCallback_failure holds the state for a server call to RegistrationCallback.failure.
// See server.Call for documentation.
type RegistrationCallback_failure struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RegistrationCallback_failure) Args() RegistrationCallback_failure_Params {
	return RegistrationCallback_failure_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RegistrationCallback_failure) AllocResults() (RegistrationCallback_failure_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RegistrationCallback_failure_Results(r), err
}

// RegistrationCallback_List is a list of RegistrationCallback.
type RegistrationCallback_List = capnp.CapList[RegistrationCallback]

// NewRegistrationCallback creates a new list of RegistrationCallback.
func NewRegistrationCallback_List(s *capnp.Segment, sz int32) (RegistrationCallback_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[RegistrationCallback](l), err
}

type RegistrationCallback_success_Params capnp.Struct

// RegistrationCallback_success_Params_TypeID is the unique identifier for the type RegistrationCallback_success_Params.
const RegistrationCallback_success_Params_TypeID = 0xeef7f0c34e3720a5

func NewRegistrationCallback_success_Params(s *capnp.Segment) (RegistrationCallback_success_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RegistrationCallback_success_Params(st), err
}

func NewRootRegistrationCallback_success_Params(s *capnp.Segment) (RegistrationCallback_success_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RegistrationCallback_success_Params(st), err
}

func ReadRootRegistrationCallback_success_Params(msg *capnp.Message) (RegistrationCallback_success_Params, error) {
	root, err := msg.Root()
	return RegistrationCallback_success_Params(root.Struct()), err
}

func (s RegistrationCallback_success_Params) String() string {
	str, _ := text.Marshal(0xeef7f0c34e3720a5, capnp.Struct(s))
	return str
}

func (s RegistrationCallback_success_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RegistrationCallback_success_Params) DecodeFromPtr(p capnp.Ptr) RegistrationCallback_success_Params {
	return RegistrationCallback_success_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RegistrationCallback_success_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RegistrationCallback_success_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RegistrationCallback_success_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RegistrationCallback_success_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RegistrationCallback_success_Params) Resolver() ServiceResolver {
	p, _ := capnp.Struct(s).Ptr(0)
	return ServiceResolver(p.Interface().Client())
}

func (s RegistrationCallback_success_Params) HasResolver() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RegistrationCallback_success_Params) SetResolver(v ServiceResolver) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// RegistrationCallback_success_Params_List is a list of RegistrationCallback_success_Params.
type RegistrationCallback_success_Params_List = capnp.StructList[RegistrationCallback_success_Params]

// NewRegistrationCallback_success_Params creates a new list of RegistrationCallback_success_Params.
func NewRegistrationCallback_success_Params_List(s *capnp.Segment, sz int32) (RegistrationCallback_success_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RegistrationCallback_success_Params](l), err
}

// RegistrationCallback_success_Params_Future is a wrapper for a RegistrationCallback_success_Params promised by a client call.
type RegistrationCallback_success_Params_Future struct{ *capnp.Future }

func (f RegistrationCallback_success_Params_Future) Struct() (RegistrationCallback_success_Params, error) {
	p, err := f.Future.Ptr()
	return RegistrationCallback_success_Params(p.Struct()), err
}
func (p RegistrationCallback_success_Params_Future) Resolver() ServiceResolver {
	return ServiceResolver(p.Future.Field(0, nil).Client())
}

type RegistrationCallback_success_Results capnp.Struct

// RegistrationCallback_success_Results_TypeID is the unique identifier for the type RegistrationCallback_success_Results.
const RegistrationCallback_success_Results_TypeID = 0x8469960757e66de0

func NewRegistrationCallback_success_Results(s *capnp.Segment) (RegistrationCallback_success_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RegistrationCallback_success_Results(st), err
}

func NewRootRegistrationCallback_success_Results(s *capnp.Segment) (RegistrationCallback_success_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RegistrationCallback_success_Results(st), err
}

func ReadRootRegistrationCallback_success_Results(msg *capnp.Message) (RegistrationCallback_success_Results, error) {
	root, err := msg.Root()
	return RegistrationCallback_success_Results(root.Struct()), err
}

func (s RegistrationCallback_success_Results) String() string {
	str, _ := text.Marshal(0x8469960757e66de0, capnp.Struct(s))
	return str
}

func (s RegistrationCallback_success_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RegistrationCallback_success_Results) DecodeFromPtr(p capnp.Ptr) RegistrationCallback_success_Results {
	return RegistrationCallback_success_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RegistrationCallback_success_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RegistrationCallback_success_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RegistrationCallback_success_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RegistrationCallback_success_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// RegistrationCallback_success_Results_List is a list of RegistrationCallback_success_Results.
type RegistrationCallback_success_Results_List = capnp.StructList[RegistrationCallback_success_Results]

// NewRegistrationCallback_success_Results creates a new list of RegistrationCallback_success_Results.
func NewRegistrationCallback_success_Results_List(s *capnp.Segment, sz int32) (RegistrationCallback_success_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[RegistrationCallback_success_Results](l), err
}

// RegistrationCallback_success_Results_Future is a wrapper for a RegistrationCallback_success_Results promised by a client call.
type RegistrationCallback_success_Results_Future struct{ *capnp.Future }

func (f RegistrationCallback_success_Results_Future) Struct() (RegistrationCallback_success_Results, error) {
	p, err := f.Future.Ptr()
	return RegistrationCallback_success_Results(p.Struct()), err
}

type RegistrationCallback_failure_Params capnp.Struct

// RegistrationCallback_failure_Params_TypeID is the unique identifier for the type RegistrationCallback_failure_Params.
const RegistrationCallback_failure_Params_TypeID = 0x951568362282a2a1

func NewRegistrationCallback_failure_Params(s *capnp.Segment) (RegistrationCallback_failure_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RegistrationCallback_failure_Params(st), err
}

func NewRootRegistrationCallback_failure_Params(s *capnp.Segment) (RegistrationCallback_failure_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RegistrationCallback_failure_Params(st), err
}

func ReadRootRegistrationCallback_failure_Params(msg *capnp.Message) (RegistrationCallback_failure_Params, error) {
	root, err := msg.Root()
	return RegistrationCallback_failure_Params(root.Struct()), err
}

func (s RegistrationCallback_failure_Params) String() string {
	str, _ := text.Marshal(0x951568362282a2a1, capnp.Struct(s))
	return str
}

func (s RegistrationCallback_failure_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RegistrationCallback_failure_Params) DecodeFromPtr(p capnp.Ptr) RegistrationCallback_failure_Params {
	return RegistrationCallback_failure_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RegistrationCallback_failure_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RegistrationCallback_failure_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RegistrationCallback_failure_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RegistrationCallback_failure_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RegistrationCallback_failure_Params) Err() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RegistrationCallback_failure_Params) HasErr() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RegistrationCallback_failure_Params) ErrBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RegistrationCallback_failure_Params) SetErr(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// RegistrationCallback_failure_Params_List is a list of RegistrationCallback_failure_Params.
type RegistrationCallback_failure_Params_List = capnp.StructList[RegistrationCallback_failure_Params]

// NewRegistrationCallback_failure_Params creates a new list of RegistrationCallback_failure_Params.
func NewRegistrationCallback_failure_Params_List(s *capnp.Segment, sz int32) (RegistrationCallback_failure_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RegistrationCallback_failure_Params](l), err
}

// RegistrationCallback_failure_Params_Future is a wrapper for a RegistrationCallback_failure_Params promised by a client call.
type RegistrationCallback_failure_Params_Future struct{ *capnp.Future }

func (f RegistrationCallback_failure_Params_Future) Struct() (RegistrationCallback_failure_Params, error) {
	p, err := f.Future.Ptr()
	return RegistrationCallback_failure_Params(p.Struct()), err
}

type RegistrationCallback_failure_Results capnp.Struct

// RegistrationCallback_failure_Results_TypeID is the unique identifier for the type RegistrationCallback_failure_Results.
const RegistrationCallback_failure_Results_TypeID = 0x96b071476ce5ab2f

func NewRegistrationCallback_failure_Results(s *capnp.Segment) (RegistrationCallback_failure_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RegistrationCallback_failure_Results(st), err
}

func NewRootRegistrationCallback_failure_Results(s *capnp.Segment) (RegistrationCallback_failure_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RegistrationCallback_failure_Results(st), err
}

func ReadRootRegistrationCallback_failure_Results(msg *capnp.Message) (RegistrationCallback_failure_Results, error) {
	root, err := msg.Root()
	return RegistrationCallback_failure_Results(root.Struct()), err
}

func (s RegistrationCallback_failure_Results) String() string {
	str, _ := text.Marshal(0x96b071476ce5ab2f, capnp.Struct(s))
	return str
}

func (s RegistrationCallback_failure_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RegistrationCallback_failure_Results) DecodeFromPtr(p capnp.Ptr) RegistrationCallback_failure_Results {
	return RegistrationCallback_failure_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RegistrationCallback_failure_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RegistrationCallback_failure_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RegistrationCallback_failure_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RegistrationCallback_failure_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// RegistrationCallback_failure_Results_List is a list of RegistrationCallback_failure_Results.
type RegistrationCallback_failure_Results_List = capnp.StructList[RegistrationCallback_failure_Results]

// NewRegistrationCallback_failure_Results creates a new list of RegistrationCallback_failure_Results.
func NewRegistrationCallback_failure_Results_List(s *capnp.Segment, sz int32) (RegistrationCallback_failure_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[RegistrationCallback_failure_Results](l), err
}

// RegistrationCallback_failure_Results_Future is a wrapper for a RegistrationCallback_failure_Results promised by a client call.
type RegistrationCallback_failure_Results_Future struct{ *capnp.Future }

func (f RegistrationCallback_failure_Results_Future) Struct() (RegistrationCallback_failure_Results, error) {
	p, err := f.Future.Ptr()
	return RegistrationCallback_failure_Results(p.Struct()), err
}

type RegistrationRequest capnp.Struct

// RegistrationRequest_TypeID is the unique identifier for the type RegistrationRequest.
const RegistrationRequest_TypeID = 0x8bf557328a6bd599

func NewRegistrationRequest(s *capnp.Segment) (RegistrationRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return RegistrationRequest(st), err
}

func NewRootRegistrationRequest(s *capnp.Segment) (RegistrationRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return RegistrationRequest(st), err
}

func ReadRootRegistrationRequest(msg *capnp.Message) (RegistrationRequest, error) {
	root, err := msg.Root()
	return RegistrationRequest(root.Struct()), err
}

func (s RegistrationRequest) String() string {
	str, _ := text.Marshal(0x8bf557328a6bd599, capnp.Struct(s))
	return str
}

func (s RegistrationRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RegistrationRequest) DecodeFromPtr(p capnp.Ptr) RegistrationRequest {
	return RegistrationRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RegistrationRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RegistrationRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RegistrationRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RegistrationRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RegistrationRequest) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RegistrationRequest) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RegistrationRequest) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RegistrationRequest) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RegistrationRequest) Description() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s RegistrationRequest) HasDescription() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RegistrationRequest) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s RegistrationRequest) SetDescription(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s RegistrationRequest) Consumes() (ServiceRequest_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return ServiceRequest_List(p.List()), err
}

func (s RegistrationRequest) HasConsumes() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s RegistrationRequest) SetConsumes(v ServiceRequest_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewConsumes sets the consumes field to a newly
// allocated ServiceRequest_List, preferring placement in s's segment.
func (s RegistrationRequest) NewConsumes(n int32) (ServiceRequest_List, error) {
	l, err := NewServiceRequest_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ServiceRequest_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s RegistrationRequest) Produces() (Service_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return Service_List(p.List()), err
}

func (s RegistrationRequest) HasProduces() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s RegistrationRequest) SetProduces(v Service_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewProduces sets the produces field to a newly
// allocated Service_List, preferring placement in s's segment.
func (s RegistrationRequest) NewProduces(n int32) (Service_List, error) {
	l, err := NewService_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Service_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s RegistrationRequest) Callback() RegistrationCallback {
	p, _ := capnp.Struct(s).Ptr(4)
	return RegistrationCallback(p.Interface().Client())
}

func (s RegistrationRequest) HasCallback() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s RegistrationRequest) SetCallback(v RegistrationCallback) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(4, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(4, in.ToPtr())
}

func (s RegistrationRequest) BootstrapKey() (string, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s RegistrationRequest) HasBootstrapKey() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s RegistrationRequest) BootstrapKeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s RegistrationRequest) SetBootstrapKey(v string) error {
	return capnp.Struct(s).SetText(5, v)
}

// RegistrationRequest_List is a list of RegistrationRequest.
type RegistrationRequest_List = capnp.StructList[RegistrationRequest]

// NewRegistrationRequest creates a new list of RegistrationRequest.
func NewRegistrationRequest_List(s *capnp.Segment, sz int32) (RegistrationRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6}, sz)
	return capnp.StructList[RegistrationRequest](l), err
}

// RegistrationRequest_Future is a wrapper for a RegistrationRequest promised by a client call.
type RegistrationRequest_Future struct{ *capnp.Future }

func (f RegistrationRequest_Future) Struct() (RegistrationRequest, error) {
	p, err := f.Future.Ptr()
	return RegistrationRequest(p.Struct()), err
}
func (p RegistrationRequest_Future) Callback() RegistrationCallback {
	return RegistrationCallback(p.Future.Field(4, nil).Client())
}

type RegistrationResponse capnp.Struct
type RegistrationResponse_Which uint16

const (
	RegistrationResponse_Which_success RegistrationResponse_Which = 0
	RegistrationResponse_Which_failure RegistrationResponse_Which = 1
)

func (w RegistrationResponse_Which) String() string {
	const s = "successfailure"
	switch w {
	case RegistrationResponse_Which_success:
		return s[0:7]
	case RegistrationResponse_Which_failure:
		return s[7:14]

	}
	return "RegistrationResponse_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// RegistrationResponse_TypeID is the unique identifier for the type RegistrationResponse.
const RegistrationResponse_TypeID = 0xdba1e9d6950dfe3f

func NewRegistrationResponse(s *capnp.Segment) (RegistrationResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RegistrationResponse(st), err
}

func NewRootRegistrationResponse(s *capnp.Segment) (RegistrationResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RegistrationResponse(st), err
}

func ReadRootRegistrationResponse(msg *capnp.Message) (RegistrationResponse, error) {
	root, err := msg.Root()
	return RegistrationResponse(root.Struct()), err
}

func (s RegistrationResponse) String() string {
	str, _ := text.Marshal(0xdba1e9d6950dfe3f, capnp.Struct(s))
	return str
}

func (s RegistrationResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RegistrationResponse) DecodeFromPtr(p capnp.Ptr) RegistrationResponse {
	return RegistrationResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RegistrationResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s RegistrationResponse) Which() RegistrationResponse_Which {
	return RegistrationResponse_Which(capnp.Struct(s).Uint16(0))
}
func (s RegistrationResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RegistrationResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RegistrationResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RegistrationResponse) Success() ServiceResolver {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != success")
	}
	p, _ := capnp.Struct(s).Ptr(0)
	return ServiceResolver(p.Interface().Client())
}

func (s RegistrationResponse) HasSuccess() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s RegistrationResponse) SetSuccess(v ServiceResolver) error {
	capnp.Struct(s).SetUint16(0, 0)
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s RegistrationResponse) Failure() (string, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != failure")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RegistrationResponse) HasFailure() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s RegistrationResponse) FailureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RegistrationResponse) SetFailure(v string) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetText(0, v)
}

// RegistrationResponse_List is a list of RegistrationResponse.
type RegistrationResponse_List = capnp.StructList[RegistrationResponse]

// NewRegistrationResponse creates a new list of RegistrationResponse.
func NewRegistrationResponse_List(s *capnp.Segment, sz int32) (RegistrationResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[RegistrationResponse](l), err
}

// RegistrationResponse_Future is a wrapper for a RegistrationResponse promised by a client call.
type RegistrationResponse_Future struct{ *capnp.Future }

func (f RegistrationResponse_Future) Struct() (RegistrationResponse, error) {
	p, err := f.Future.Ptr()
	return RegistrationResponse(p.Struct()), err
}
func (p RegistrationResponse_Future) Success() ServiceResolver {
	return ServiceResolver(p.Future.Field(0, nil).Client())
}

const schema_8f5494d9dd28283d = "x\xda\x94SMhcU\x14>\xdf\xbd\xef\xa7jb" +
	"\xbd}\x11*\xb8\x90R%\x8a\xd6\xd6\xfa\x03EI\xad" +
	"\x14AEr\xa3R\x97\xbe\xbe^56\xc9K\xdfK" +
	"*\x8aP\x10ET\xb0\x9b\xb6PP\xb0b\xa9\xc5M" +
	"]\x88\xb4\xfe\xe0\xcfF\xf7V\x14-v3\xc3\xccb" +
	"\x86Y\xcc00\x03\xbd\xc3M\xf2\x92\xd0\xe90\x9d\xdd" +
	"\xe3{\xe7\x9c\xef\xbb\xe7\xfb\xce\xf0\xe3l\xdc\x1aIo" +
	"\xdcDLVmG\xef\x97ON\xb9+\xc5\xf7Hd" +
	"Ad\xb9D\xa3\xdb\xd6\xaf K\xaf\xee\xce~\xf4\xd0" +
	"\xd4\x85\x8fIx\xd0Od\xb3{\xff,\xbd\xb8H\xb6" +
	"cJ6\xad1x\xdb\x8d\xeao\xad)\x10\xf4\xda\x17" +
	"\xef\x0e<\xfa\xfa\xed\xcb\xcd96\xcc\xafG\x9c\x1d\x10" +
	"\xbcI'G\xd0\x0f~}\xa2\xf4\xf4\xdc\xd6J\x17\x91" +
	"r\x1aD\xff\x7f\xb7\xb5\xb8\xd4w\xf9\x0f\x12\x1e\xef\x10" +
	"\x11F_r&\xe0)C\xe8\xf9\xce\x07\xde7\xe6K" +
	"\xe7\x0e\xd2\xcb\x7f\x9d^\xfb\x97\xa4\x87.]\x93p\x19" +
	"\xd1\xe8\xaai\xd9l\xb4\xac;o\x12\xf4\xfa]\x8f=" +
	"\xff\xdb\xb9\x8bg\xbbu\xc1m\xe8\x12\xae\xd1ugy" +
	"\xe1\xfe{^\xf9I\x1fzf\xf3\x01n\x1f\xbcI\xd7" +
	"L{\xd2\xcd\xd1\x9e\x8e\xd4k\xc5\xb8\x16\xf97\xd7\x8a" +
	"ae(\xf0\xab\x95\xeaX\xa1\x85\x19\xe8)\xbfT\x9a" +
	"\xf6\x83\xd9\xa1\xb8\x1e\x04*\x8e\x07\x0b*\xae\x97j1" +
	"E]EG\xf4\x15rj\xae\xae\xe2Z\x1e\x90\xfd\xdc" +
	"\"\xb2@$V\xef#\x92K\x1c\xf2s\x06\x01d`" +
	"\xc0\xcf\xa6\x89\xe4\xa7\x1c\xf2+\x06\xc1X\x06\x8cH\xac" +
	"?C$\xbf\xe4\x90?3\x08\xce3\xe0D\xe2G\x03" +
	"\xfe\xc0!\xfff\x10\x96\x95\x81E$v\x0d\xf8'\x87" +
	"\xdcg\x10\xb6\x9d\x81M$\xf6\xde \x92\xffq\xc8S" +
	"\x0c\xbd\x15\xbf\xac\x90\"\x86\x14A\xcf\xa88\x88\x8a\xd5" +
	"\x1a\xb9\xc5\xb0\xd2F\x83\xb0\x12\xd7\xcb*&\"\xdcJ" +
	"\xc8s\xe0\xb6\xce\"\x09\x06\xd4\xd5(\x9c\xa9\x07\x87\x8a" +
	"\x9e;\xf8p\xe3\xe5\xf3\xef|\x92\x14\x05\xad\x85\x99\"" +
	"\xd1I\x02\x01\x82\xa0\xa7\xc3\xb0fVD\xbd\xd5g\xd5" +
	"[m\xfad\x99\xf6\xf5\\x\xd5/\x96\xea\x91\x1a\xcc" +
	"\xe5\xfd\xc8/\xc7\xd2j\xaf6=@${8d\x86" +
	"\xc1UQt\xd5\xec[\x8e;\xfb\x98\x0e'}d," +
	"\xee\xe16Q;\x9aHnP\x8cL\x10\x13w\xbb\xe8" +
	"\x9c\x13\x92\xb3\x11w\x98\x7fiw\xa1\x95\xacq,\xb4" +
	"\x14\x8c#\x8f\x8en\xebZ\x09Sq5\xac\xc4\xaa\xc5" +
	"o\xa5\xb4n,\xe2\xde\x09\"9\xc8!\x87\x19\xd28" +
	"\xd0\xcd\x90=`\xd0,\x87|\x98!a\x84\xd0\x97v" +
	"\xde~\xff\xfb_\xce\xfc\xde\xf2'Qp\xe3\xc6$\xe7" +
	"q\x841&\x9f)\x0e\xd9\xcf\xcc\xbc8,\xcd\xab\xa8" +
	"\x99\x8eC\xecm6\xde\xc5\xf6\x82\x8a\xe6\x8b\x81*4" +
	"\xce\x09\x8d{\xea\x9a=\xd61=\x17)?\xeeD\xfa" +
	"J\x00\x00\x00\xff\xff\xc6\xc2u\xb9"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_8f5494d9dd28283d,
		Nodes: []uint64{
			0x8469960757e66de0,
			0x8bf557328a6bd599,
			0x951568362282a2a1,
			0x96b071476ce5ab2f,
			0xc9fb12948fb0b7df,
			0xdba1e9d6950dfe3f,
			0xeef7f0c34e3720a5,
			0xffbe60262c7f6d1c,
		},
		Compressed: true,
	})
}
